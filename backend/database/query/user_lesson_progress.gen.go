// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newUserLessonProgress(db *gorm.DB, opts ...gen.DOOption) userLessonProgress {
	_userLessonProgress := userLessonProgress{}

	_userLessonProgress.userLessonProgressDo.UseDB(db, opts...)
	_userLessonProgress.userLessonProgressDo.UseModel(&model.UserLessonProgress{})

	tableName := _userLessonProgress.userLessonProgressDo.TableName()
	_userLessonProgress.ALL = field.NewAsterisk(tableName)
	_userLessonProgress.ID = field.NewUint(tableName, "id")
	_userLessonProgress.LessonID = field.NewUint(tableName, "lesson_id")
	_userLessonProgress.UserID = field.NewUint(tableName, "user_id")
	_userLessonProgress.ProgressPercentage = field.NewInt(tableName, "progress_percentage")
	_userLessonProgress.Status = field.NewString(tableName, "status")
	_userLessonProgress.TimeSpent = field.NewInt(tableName, "time_spent")
	_userLessonProgress.LastAccessed = field.NewTime(tableName, "last_accessed")
	_userLessonProgress.CompletionDate = field.NewTime(tableName, "completion_date")
	_userLessonProgress.Rating = field.NewInt(tableName, "rating")
	_userLessonProgress.ReviewText = field.NewString(tableName, "review_text")
	_userLessonProgress.CreatedAt = field.NewTime(tableName, "created_at")
	_userLessonProgress.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userLessonProgress.Lesson = userLessonProgressBelongsToLesson{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lesson", "model.Lessons"),
		Category: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lesson.Category", "model.LessonCategories"),
		},
	}

	_userLessonProgress.User = userLessonProgressBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_userLessonProgress.fillFieldMap()

	return _userLessonProgress
}

type userLessonProgress struct {
	userLessonProgressDo userLessonProgressDo

	ALL                field.Asterisk
	ID                 field.Uint
	LessonID           field.Uint
	UserID             field.Uint
	ProgressPercentage field.Int
	Status             field.String
	TimeSpent          field.Int
	LastAccessed       field.Time
	CompletionDate     field.Time
	Rating             field.Int
	ReviewText         field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time
	Lesson             userLessonProgressBelongsToLesson

	User userLessonProgressBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userLessonProgress) Table(newTableName string) *userLessonProgress {
	u.userLessonProgressDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLessonProgress) As(alias string) *userLessonProgress {
	u.userLessonProgressDo.DO = *(u.userLessonProgressDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLessonProgress) updateTableName(table string) *userLessonProgress {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.LessonID = field.NewUint(table, "lesson_id")
	u.UserID = field.NewUint(table, "user_id")
	u.ProgressPercentage = field.NewInt(table, "progress_percentage")
	u.Status = field.NewString(table, "status")
	u.TimeSpent = field.NewInt(table, "time_spent")
	u.LastAccessed = field.NewTime(table, "last_accessed")
	u.CompletionDate = field.NewTime(table, "completion_date")
	u.Rating = field.NewInt(table, "rating")
	u.ReviewText = field.NewString(table, "review_text")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userLessonProgress) WithContext(ctx context.Context) *userLessonProgressDo {
	return u.userLessonProgressDo.WithContext(ctx)
}

func (u userLessonProgress) TableName() string { return u.userLessonProgressDo.TableName() }

func (u userLessonProgress) Alias() string { return u.userLessonProgressDo.Alias() }

func (u userLessonProgress) Columns(cols ...field.Expr) gen.Columns {
	return u.userLessonProgressDo.Columns(cols...)
}

func (u *userLessonProgress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLessonProgress) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["lesson_id"] = u.LessonID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["progress_percentage"] = u.ProgressPercentage
	u.fieldMap["status"] = u.Status
	u.fieldMap["time_spent"] = u.TimeSpent
	u.fieldMap["last_accessed"] = u.LastAccessed
	u.fieldMap["completion_date"] = u.CompletionDate
	u.fieldMap["rating"] = u.Rating
	u.fieldMap["review_text"] = u.ReviewText
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt

}

func (u userLessonProgress) clone(db *gorm.DB) userLessonProgress {
	u.userLessonProgressDo.ReplaceConnPool(db.Statement.ConnPool)
	u.Lesson.db = db.Session(&gorm.Session{Initialized: true})
	u.Lesson.db.Statement.ConnPool = db.Statement.ConnPool
	u.User.db = db.Session(&gorm.Session{Initialized: true})
	u.User.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u userLessonProgress) replaceDB(db *gorm.DB) userLessonProgress {
	u.userLessonProgressDo.ReplaceDB(db)
	u.Lesson.db = db.Session(&gorm.Session{})
	u.User.db = db.Session(&gorm.Session{})
	return u
}

type userLessonProgressBelongsToLesson struct {
	db *gorm.DB

	field.RelationField

	Category struct {
		field.RelationField
	}
}

func (a userLessonProgressBelongsToLesson) Where(conds ...field.Expr) *userLessonProgressBelongsToLesson {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userLessonProgressBelongsToLesson) WithContext(ctx context.Context) *userLessonProgressBelongsToLesson {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userLessonProgressBelongsToLesson) Session(session *gorm.Session) *userLessonProgressBelongsToLesson {
	a.db = a.db.Session(session)
	return &a
}

func (a userLessonProgressBelongsToLesson) Model(m *model.UserLessonProgress) *userLessonProgressBelongsToLessonTx {
	return &userLessonProgressBelongsToLessonTx{a.db.Model(m).Association(a.Name())}
}

func (a userLessonProgressBelongsToLesson) Unscoped() *userLessonProgressBelongsToLesson {
	a.db = a.db.Unscoped()
	return &a
}

type userLessonProgressBelongsToLessonTx struct{ tx *gorm.Association }

func (a userLessonProgressBelongsToLessonTx) Find() (result *model.Lessons, err error) {
	return result, a.tx.Find(&result)
}

func (a userLessonProgressBelongsToLessonTx) Append(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userLessonProgressBelongsToLessonTx) Replace(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userLessonProgressBelongsToLessonTx) Delete(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userLessonProgressBelongsToLessonTx) Clear() error {
	return a.tx.Clear()
}

func (a userLessonProgressBelongsToLessonTx) Count() int64 {
	return a.tx.Count()
}

func (a userLessonProgressBelongsToLessonTx) Unscoped() *userLessonProgressBelongsToLessonTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userLessonProgressBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a userLessonProgressBelongsToUser) Where(conds ...field.Expr) *userLessonProgressBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userLessonProgressBelongsToUser) WithContext(ctx context.Context) *userLessonProgressBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userLessonProgressBelongsToUser) Session(session *gorm.Session) *userLessonProgressBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userLessonProgressBelongsToUser) Model(m *model.UserLessonProgress) *userLessonProgressBelongsToUserTx {
	return &userLessonProgressBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a userLessonProgressBelongsToUser) Unscoped() *userLessonProgressBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type userLessonProgressBelongsToUserTx struct{ tx *gorm.Association }

func (a userLessonProgressBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a userLessonProgressBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userLessonProgressBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userLessonProgressBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userLessonProgressBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userLessonProgressBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a userLessonProgressBelongsToUserTx) Unscoped() *userLessonProgressBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userLessonProgressDo struct{ gen.DO }

func (u userLessonProgressDo) Debug() *userLessonProgressDo {
	return u.withDO(u.DO.Debug())
}

func (u userLessonProgressDo) WithContext(ctx context.Context) *userLessonProgressDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLessonProgressDo) ReadDB() *userLessonProgressDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLessonProgressDo) WriteDB() *userLessonProgressDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLessonProgressDo) Session(config *gorm.Session) *userLessonProgressDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLessonProgressDo) Clauses(conds ...clause.Expression) *userLessonProgressDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLessonProgressDo) Returning(value interface{}, columns ...string) *userLessonProgressDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLessonProgressDo) Not(conds ...gen.Condition) *userLessonProgressDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLessonProgressDo) Or(conds ...gen.Condition) *userLessonProgressDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLessonProgressDo) Select(conds ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLessonProgressDo) Where(conds ...gen.Condition) *userLessonProgressDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLessonProgressDo) Order(conds ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLessonProgressDo) Distinct(cols ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLessonProgressDo) Omit(cols ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLessonProgressDo) Join(table schema.Tabler, on ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLessonProgressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLessonProgressDo) RightJoin(table schema.Tabler, on ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLessonProgressDo) Group(cols ...field.Expr) *userLessonProgressDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLessonProgressDo) Having(conds ...gen.Condition) *userLessonProgressDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLessonProgressDo) Limit(limit int) *userLessonProgressDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLessonProgressDo) Offset(offset int) *userLessonProgressDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLessonProgressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userLessonProgressDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLessonProgressDo) Unscoped() *userLessonProgressDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLessonProgressDo) Create(values ...*model.UserLessonProgress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLessonProgressDo) CreateInBatches(values []*model.UserLessonProgress, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLessonProgressDo) Save(values ...*model.UserLessonProgress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLessonProgressDo) First() (*model.UserLessonProgress, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLessonProgress), nil
	}
}

func (u userLessonProgressDo) Take() (*model.UserLessonProgress, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLessonProgress), nil
	}
}

func (u userLessonProgressDo) Last() (*model.UserLessonProgress, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLessonProgress), nil
	}
}

func (u userLessonProgressDo) Find() ([]*model.UserLessonProgress, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLessonProgress), err
}

func (u userLessonProgressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLessonProgress, err error) {
	buf := make([]*model.UserLessonProgress, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLessonProgressDo) FindInBatches(result *[]*model.UserLessonProgress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLessonProgressDo) Attrs(attrs ...field.AssignExpr) *userLessonProgressDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLessonProgressDo) Assign(attrs ...field.AssignExpr) *userLessonProgressDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLessonProgressDo) Joins(fields ...field.RelationField) *userLessonProgressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLessonProgressDo) Preload(fields ...field.RelationField) *userLessonProgressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLessonProgressDo) FirstOrInit() (*model.UserLessonProgress, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLessonProgress), nil
	}
}

func (u userLessonProgressDo) FirstOrCreate() (*model.UserLessonProgress, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLessonProgress), nil
	}
}

func (u userLessonProgressDo) FindByPage(offset int, limit int) (result []*model.UserLessonProgress, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLessonProgressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLessonProgressDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLessonProgressDo) Delete(models ...*model.UserLessonProgress) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLessonProgressDo) withDO(do gen.Dao) *userLessonProgressDo {
	u.DO = *do.(*gen.DO)
	return u
}
