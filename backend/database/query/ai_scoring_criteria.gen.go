// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newAIScoringCriteria(db *gorm.DB, opts ...gen.DOOption) aIScoringCriteria {
	_aIScoringCriteria := aIScoringCriteria{}

	_aIScoringCriteria.aIScoringCriteriaDo.UseDB(db, opts...)
	_aIScoringCriteria.aIScoringCriteriaDo.UseModel(&model.AIScoringCriteria{})

	tableName := _aIScoringCriteria.aIScoringCriteriaDo.TableName()
	_aIScoringCriteria.ALL = field.NewAsterisk(tableName)
	_aIScoringCriteria.ID = field.NewUint(tableName, "id")
	_aIScoringCriteria.CriteriaName = field.NewString(tableName, "criteria_name")
	_aIScoringCriteria.Description = field.NewString(tableName, "description")
	_aIScoringCriteria.MaxPoints = field.NewInt(tableName, "max_points")
	_aIScoringCriteria.Weight = field.NewFloat64(tableName, "weight")
	_aIScoringCriteria.IsActive = field.NewBool(tableName, "is_active")
	_aIScoringCriteria.CreatedAt = field.NewTime(tableName, "created_at")

	_aIScoringCriteria.fillFieldMap()

	return _aIScoringCriteria
}

type aIScoringCriteria struct {
	aIScoringCriteriaDo aIScoringCriteriaDo

	ALL          field.Asterisk
	ID           field.Uint
	CriteriaName field.String
	Description  field.String
	MaxPoints    field.Int
	Weight       field.Float64
	IsActive     field.Bool
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (a aIScoringCriteria) Table(newTableName string) *aIScoringCriteria {
	a.aIScoringCriteriaDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIScoringCriteria) As(alias string) *aIScoringCriteria {
	a.aIScoringCriteriaDo.DO = *(a.aIScoringCriteriaDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIScoringCriteria) updateTableName(table string) *aIScoringCriteria {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CriteriaName = field.NewString(table, "criteria_name")
	a.Description = field.NewString(table, "description")
	a.MaxPoints = field.NewInt(table, "max_points")
	a.Weight = field.NewFloat64(table, "weight")
	a.IsActive = field.NewBool(table, "is_active")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *aIScoringCriteria) WithContext(ctx context.Context) *aIScoringCriteriaDo {
	return a.aIScoringCriteriaDo.WithContext(ctx)
}

func (a aIScoringCriteria) TableName() string { return a.aIScoringCriteriaDo.TableName() }

func (a aIScoringCriteria) Alias() string { return a.aIScoringCriteriaDo.Alias() }

func (a aIScoringCriteria) Columns(cols ...field.Expr) gen.Columns {
	return a.aIScoringCriteriaDo.Columns(cols...)
}

func (a *aIScoringCriteria) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIScoringCriteria) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["criteria_name"] = a.CriteriaName
	a.fieldMap["description"] = a.Description
	a.fieldMap["max_points"] = a.MaxPoints
	a.fieldMap["weight"] = a.Weight
	a.fieldMap["is_active"] = a.IsActive
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a aIScoringCriteria) clone(db *gorm.DB) aIScoringCriteria {
	a.aIScoringCriteriaDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aIScoringCriteria) replaceDB(db *gorm.DB) aIScoringCriteria {
	a.aIScoringCriteriaDo.ReplaceDB(db)
	return a
}

type aIScoringCriteriaDo struct{ gen.DO }

func (a aIScoringCriteriaDo) Debug() *aIScoringCriteriaDo {
	return a.withDO(a.DO.Debug())
}

func (a aIScoringCriteriaDo) WithContext(ctx context.Context) *aIScoringCriteriaDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIScoringCriteriaDo) ReadDB() *aIScoringCriteriaDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIScoringCriteriaDo) WriteDB() *aIScoringCriteriaDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIScoringCriteriaDo) Session(config *gorm.Session) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIScoringCriteriaDo) Clauses(conds ...clause.Expression) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIScoringCriteriaDo) Returning(value interface{}, columns ...string) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIScoringCriteriaDo) Not(conds ...gen.Condition) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIScoringCriteriaDo) Or(conds ...gen.Condition) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIScoringCriteriaDo) Select(conds ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIScoringCriteriaDo) Where(conds ...gen.Condition) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIScoringCriteriaDo) Order(conds ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIScoringCriteriaDo) Distinct(cols ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIScoringCriteriaDo) Omit(cols ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIScoringCriteriaDo) Join(table schema.Tabler, on ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIScoringCriteriaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIScoringCriteriaDo) RightJoin(table schema.Tabler, on ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIScoringCriteriaDo) Group(cols ...field.Expr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIScoringCriteriaDo) Having(conds ...gen.Condition) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIScoringCriteriaDo) Limit(limit int) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIScoringCriteriaDo) Offset(offset int) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIScoringCriteriaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIScoringCriteriaDo) Unscoped() *aIScoringCriteriaDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIScoringCriteriaDo) Create(values ...*model.AIScoringCriteria) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIScoringCriteriaDo) CreateInBatches(values []*model.AIScoringCriteria, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIScoringCriteriaDo) Save(values ...*model.AIScoringCriteria) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIScoringCriteriaDo) First() (*model.AIScoringCriteria, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIScoringCriteria), nil
	}
}

func (a aIScoringCriteriaDo) Take() (*model.AIScoringCriteria, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIScoringCriteria), nil
	}
}

func (a aIScoringCriteriaDo) Last() (*model.AIScoringCriteria, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIScoringCriteria), nil
	}
}

func (a aIScoringCriteriaDo) Find() ([]*model.AIScoringCriteria, error) {
	result, err := a.DO.Find()
	return result.([]*model.AIScoringCriteria), err
}

func (a aIScoringCriteriaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIScoringCriteria, err error) {
	buf := make([]*model.AIScoringCriteria, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIScoringCriteriaDo) FindInBatches(result *[]*model.AIScoringCriteria, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIScoringCriteriaDo) Attrs(attrs ...field.AssignExpr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIScoringCriteriaDo) Assign(attrs ...field.AssignExpr) *aIScoringCriteriaDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIScoringCriteriaDo) Joins(fields ...field.RelationField) *aIScoringCriteriaDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIScoringCriteriaDo) Preload(fields ...field.RelationField) *aIScoringCriteriaDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIScoringCriteriaDo) FirstOrInit() (*model.AIScoringCriteria, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIScoringCriteria), nil
	}
}

func (a aIScoringCriteriaDo) FirstOrCreate() (*model.AIScoringCriteria, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIScoringCriteria), nil
	}
}

func (a aIScoringCriteriaDo) FindByPage(offset int, limit int) (result []*model.AIScoringCriteria, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIScoringCriteriaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIScoringCriteriaDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIScoringCriteriaDo) Delete(models ...*model.AIScoringCriteria) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIScoringCriteriaDo) withDO(do gen.Dao) *aIScoringCriteriaDo {
	a.DO = *do.(*gen.DO)
	return a
}
