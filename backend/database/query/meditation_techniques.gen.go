// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newMeditationTechniques(db *gorm.DB, opts ...gen.DOOption) meditationTechniques {
	_meditationTechniques := meditationTechniques{}

	_meditationTechniques.meditationTechniquesDo.UseDB(db, opts...)
	_meditationTechniques.meditationTechniquesDo.UseModel(&model.MeditationTechniques{})

	tableName := _meditationTechniques.meditationTechniquesDo.TableName()
	_meditationTechniques.ALL = field.NewAsterisk(tableName)
	_meditationTechniques.ID = field.NewUint(tableName, "id")
	_meditationTechniques.Name = field.NewString(tableName, "name")
	_meditationTechniques.Description = field.NewString(tableName, "description")
	_meditationTechniques.Instructions = field.NewString(tableName, "instructions")
	_meditationTechniques.DifficultyLevel = field.NewString(tableName, "difficulty_level")
	_meditationTechniques.RecommendedDuration = field.NewInt(tableName, "recommended_duration")
	_meditationTechniques.CreatedAt = field.NewTime(tableName, "created_at")

	_meditationTechniques.fillFieldMap()

	return _meditationTechniques
}

type meditationTechniques struct {
	meditationTechniquesDo meditationTechniquesDo

	ALL                 field.Asterisk
	ID                  field.Uint
	Name                field.String
	Description         field.String
	Instructions        field.String
	DifficultyLevel     field.String
	RecommendedDuration field.Int
	CreatedAt           field.Time

	fieldMap map[string]field.Expr
}

func (m meditationTechniques) Table(newTableName string) *meditationTechniques {
	m.meditationTechniquesDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m meditationTechniques) As(alias string) *meditationTechniques {
	m.meditationTechniquesDo.DO = *(m.meditationTechniquesDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *meditationTechniques) updateTableName(table string) *meditationTechniques {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.Instructions = field.NewString(table, "instructions")
	m.DifficultyLevel = field.NewString(table, "difficulty_level")
	m.RecommendedDuration = field.NewInt(table, "recommended_duration")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *meditationTechniques) WithContext(ctx context.Context) *meditationTechniquesDo {
	return m.meditationTechniquesDo.WithContext(ctx)
}

func (m meditationTechniques) TableName() string { return m.meditationTechniquesDo.TableName() }

func (m meditationTechniques) Alias() string { return m.meditationTechniquesDo.Alias() }

func (m meditationTechniques) Columns(cols ...field.Expr) gen.Columns {
	return m.meditationTechniquesDo.Columns(cols...)
}

func (m *meditationTechniques) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *meditationTechniques) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["instructions"] = m.Instructions
	m.fieldMap["difficulty_level"] = m.DifficultyLevel
	m.fieldMap["recommended_duration"] = m.RecommendedDuration
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m meditationTechniques) clone(db *gorm.DB) meditationTechniques {
	m.meditationTechniquesDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m meditationTechniques) replaceDB(db *gorm.DB) meditationTechniques {
	m.meditationTechniquesDo.ReplaceDB(db)
	return m
}

type meditationTechniquesDo struct{ gen.DO }

func (m meditationTechniquesDo) Debug() *meditationTechniquesDo {
	return m.withDO(m.DO.Debug())
}

func (m meditationTechniquesDo) WithContext(ctx context.Context) *meditationTechniquesDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m meditationTechniquesDo) ReadDB() *meditationTechniquesDo {
	return m.Clauses(dbresolver.Read)
}

func (m meditationTechniquesDo) WriteDB() *meditationTechniquesDo {
	return m.Clauses(dbresolver.Write)
}

func (m meditationTechniquesDo) Session(config *gorm.Session) *meditationTechniquesDo {
	return m.withDO(m.DO.Session(config))
}

func (m meditationTechniquesDo) Clauses(conds ...clause.Expression) *meditationTechniquesDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m meditationTechniquesDo) Returning(value interface{}, columns ...string) *meditationTechniquesDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m meditationTechniquesDo) Not(conds ...gen.Condition) *meditationTechniquesDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m meditationTechniquesDo) Or(conds ...gen.Condition) *meditationTechniquesDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m meditationTechniquesDo) Select(conds ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m meditationTechniquesDo) Where(conds ...gen.Condition) *meditationTechniquesDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m meditationTechniquesDo) Order(conds ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m meditationTechniquesDo) Distinct(cols ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m meditationTechniquesDo) Omit(cols ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m meditationTechniquesDo) Join(table schema.Tabler, on ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m meditationTechniquesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m meditationTechniquesDo) RightJoin(table schema.Tabler, on ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m meditationTechniquesDo) Group(cols ...field.Expr) *meditationTechniquesDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m meditationTechniquesDo) Having(conds ...gen.Condition) *meditationTechniquesDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m meditationTechniquesDo) Limit(limit int) *meditationTechniquesDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m meditationTechniquesDo) Offset(offset int) *meditationTechniquesDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m meditationTechniquesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *meditationTechniquesDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m meditationTechniquesDo) Unscoped() *meditationTechniquesDo {
	return m.withDO(m.DO.Unscoped())
}

func (m meditationTechniquesDo) Create(values ...*model.MeditationTechniques) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m meditationTechniquesDo) CreateInBatches(values []*model.MeditationTechniques, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m meditationTechniquesDo) Save(values ...*model.MeditationTechniques) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m meditationTechniquesDo) First() (*model.MeditationTechniques, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationTechniques), nil
	}
}

func (m meditationTechniquesDo) Take() (*model.MeditationTechniques, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationTechniques), nil
	}
}

func (m meditationTechniquesDo) Last() (*model.MeditationTechniques, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationTechniques), nil
	}
}

func (m meditationTechniquesDo) Find() ([]*model.MeditationTechniques, error) {
	result, err := m.DO.Find()
	return result.([]*model.MeditationTechniques), err
}

func (m meditationTechniquesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MeditationTechniques, err error) {
	buf := make([]*model.MeditationTechniques, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m meditationTechniquesDo) FindInBatches(result *[]*model.MeditationTechniques, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m meditationTechniquesDo) Attrs(attrs ...field.AssignExpr) *meditationTechniquesDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m meditationTechniquesDo) Assign(attrs ...field.AssignExpr) *meditationTechniquesDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m meditationTechniquesDo) Joins(fields ...field.RelationField) *meditationTechniquesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m meditationTechniquesDo) Preload(fields ...field.RelationField) *meditationTechniquesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m meditationTechniquesDo) FirstOrInit() (*model.MeditationTechniques, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationTechniques), nil
	}
}

func (m meditationTechniquesDo) FirstOrCreate() (*model.MeditationTechniques, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationTechniques), nil
	}
}

func (m meditationTechniquesDo) FindByPage(offset int, limit int) (result []*model.MeditationTechniques, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m meditationTechniquesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m meditationTechniquesDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m meditationTechniquesDo) Delete(models ...*model.MeditationTechniques) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *meditationTechniquesDo) withDO(do gen.Dao) *meditationTechniquesDo {
	m.DO = *do.(*gen.DO)
	return m
}
