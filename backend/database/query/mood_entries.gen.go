// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newMoodEntries(db *gorm.DB, opts ...gen.DOOption) moodEntries {
	_moodEntries := moodEntries{}

	_moodEntries.moodEntriesDo.UseDB(db, opts...)
	_moodEntries.moodEntriesDo.UseModel(&model.MoodEntries{})

	tableName := _moodEntries.moodEntriesDo.TableName()
	_moodEntries.ALL = field.NewAsterisk(tableName)
	_moodEntries.ID = field.NewUint(tableName, "id")
	_moodEntries.UserID = field.NewUint(tableName, "user_id")
	_moodEntries.EntryDate = field.NewTime(tableName, "entry_date")
	_moodEntries.MoodID = field.NewUint(tableName, "mood_id")
	_moodEntries.Intensity = field.NewInt(tableName, "intensity")
	_moodEntries.WhenFelt = field.NewString(tableName, "when_felt")
	_moodEntries.TriggerEvent = field.NewString(tableName, "trigger_event")
	_moodEntries.CopingStrategy = field.NewString(tableName, "coping_strategy")
	_moodEntries.Notes = field.NewString(tableName, "notes")
	_moodEntries.Location = field.NewString(tableName, "location")
	_moodEntries.Weather = field.NewString(tableName, "weather")
	_moodEntries.CreatedAt = field.NewTime(tableName, "created_at")
	_moodEntries.User = moodEntriesBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_moodEntries.Mood = moodEntriesBelongsToMood{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Mood", "model.Moods"),
		Category: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Mood.Category", "model.MoodCategories"),
		},
	}

	_moodEntries.fillFieldMap()

	return _moodEntries
}

type moodEntries struct {
	moodEntriesDo moodEntriesDo

	ALL            field.Asterisk
	ID             field.Uint
	UserID         field.Uint
	EntryDate      field.Time
	MoodID         field.Uint
	Intensity      field.Int
	WhenFelt       field.String
	TriggerEvent   field.String
	CopingStrategy field.String
	Notes          field.String
	Location       field.String
	Weather        field.String
	CreatedAt      field.Time
	User           moodEntriesBelongsToUser

	Mood moodEntriesBelongsToMood

	fieldMap map[string]field.Expr
}

func (m moodEntries) Table(newTableName string) *moodEntries {
	m.moodEntriesDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m moodEntries) As(alias string) *moodEntries {
	m.moodEntriesDo.DO = *(m.moodEntriesDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *moodEntries) updateTableName(table string) *moodEntries {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.UserID = field.NewUint(table, "user_id")
	m.EntryDate = field.NewTime(table, "entry_date")
	m.MoodID = field.NewUint(table, "mood_id")
	m.Intensity = field.NewInt(table, "intensity")
	m.WhenFelt = field.NewString(table, "when_felt")
	m.TriggerEvent = field.NewString(table, "trigger_event")
	m.CopingStrategy = field.NewString(table, "coping_strategy")
	m.Notes = field.NewString(table, "notes")
	m.Location = field.NewString(table, "location")
	m.Weather = field.NewString(table, "weather")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *moodEntries) WithContext(ctx context.Context) *moodEntriesDo {
	return m.moodEntriesDo.WithContext(ctx)
}

func (m moodEntries) TableName() string { return m.moodEntriesDo.TableName() }

func (m moodEntries) Alias() string { return m.moodEntriesDo.Alias() }

func (m moodEntries) Columns(cols ...field.Expr) gen.Columns { return m.moodEntriesDo.Columns(cols...) }

func (m *moodEntries) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *moodEntries) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["entry_date"] = m.EntryDate
	m.fieldMap["mood_id"] = m.MoodID
	m.fieldMap["intensity"] = m.Intensity
	m.fieldMap["when_felt"] = m.WhenFelt
	m.fieldMap["trigger_event"] = m.TriggerEvent
	m.fieldMap["coping_strategy"] = m.CopingStrategy
	m.fieldMap["notes"] = m.Notes
	m.fieldMap["location"] = m.Location
	m.fieldMap["weather"] = m.Weather
	m.fieldMap["created_at"] = m.CreatedAt

}

func (m moodEntries) clone(db *gorm.DB) moodEntries {
	m.moodEntriesDo.ReplaceConnPool(db.Statement.ConnPool)
	m.User.db = db.Session(&gorm.Session{Initialized: true})
	m.User.db.Statement.ConnPool = db.Statement.ConnPool
	m.Mood.db = db.Session(&gorm.Session{Initialized: true})
	m.Mood.db.Statement.ConnPool = db.Statement.ConnPool
	return m
}

func (m moodEntries) replaceDB(db *gorm.DB) moodEntries {
	m.moodEntriesDo.ReplaceDB(db)
	m.User.db = db.Session(&gorm.Session{})
	m.Mood.db = db.Session(&gorm.Session{})
	return m
}

type moodEntriesBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a moodEntriesBelongsToUser) Where(conds ...field.Expr) *moodEntriesBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a moodEntriesBelongsToUser) WithContext(ctx context.Context) *moodEntriesBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a moodEntriesBelongsToUser) Session(session *gorm.Session) *moodEntriesBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a moodEntriesBelongsToUser) Model(m *model.MoodEntries) *moodEntriesBelongsToUserTx {
	return &moodEntriesBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a moodEntriesBelongsToUser) Unscoped() *moodEntriesBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type moodEntriesBelongsToUserTx struct{ tx *gorm.Association }

func (a moodEntriesBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a moodEntriesBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a moodEntriesBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a moodEntriesBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a moodEntriesBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a moodEntriesBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a moodEntriesBelongsToUserTx) Unscoped() *moodEntriesBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type moodEntriesBelongsToMood struct {
	db *gorm.DB

	field.RelationField

	Category struct {
		field.RelationField
	}
}

func (a moodEntriesBelongsToMood) Where(conds ...field.Expr) *moodEntriesBelongsToMood {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a moodEntriesBelongsToMood) WithContext(ctx context.Context) *moodEntriesBelongsToMood {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a moodEntriesBelongsToMood) Session(session *gorm.Session) *moodEntriesBelongsToMood {
	a.db = a.db.Session(session)
	return &a
}

func (a moodEntriesBelongsToMood) Model(m *model.MoodEntries) *moodEntriesBelongsToMoodTx {
	return &moodEntriesBelongsToMoodTx{a.db.Model(m).Association(a.Name())}
}

func (a moodEntriesBelongsToMood) Unscoped() *moodEntriesBelongsToMood {
	a.db = a.db.Unscoped()
	return &a
}

type moodEntriesBelongsToMoodTx struct{ tx *gorm.Association }

func (a moodEntriesBelongsToMoodTx) Find() (result *model.Moods, err error) {
	return result, a.tx.Find(&result)
}

func (a moodEntriesBelongsToMoodTx) Append(values ...*model.Moods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a moodEntriesBelongsToMoodTx) Replace(values ...*model.Moods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a moodEntriesBelongsToMoodTx) Delete(values ...*model.Moods) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a moodEntriesBelongsToMoodTx) Clear() error {
	return a.tx.Clear()
}

func (a moodEntriesBelongsToMoodTx) Count() int64 {
	return a.tx.Count()
}

func (a moodEntriesBelongsToMoodTx) Unscoped() *moodEntriesBelongsToMoodTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type moodEntriesDo struct{ gen.DO }

func (m moodEntriesDo) Debug() *moodEntriesDo {
	return m.withDO(m.DO.Debug())
}

func (m moodEntriesDo) WithContext(ctx context.Context) *moodEntriesDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moodEntriesDo) ReadDB() *moodEntriesDo {
	return m.Clauses(dbresolver.Read)
}

func (m moodEntriesDo) WriteDB() *moodEntriesDo {
	return m.Clauses(dbresolver.Write)
}

func (m moodEntriesDo) Session(config *gorm.Session) *moodEntriesDo {
	return m.withDO(m.DO.Session(config))
}

func (m moodEntriesDo) Clauses(conds ...clause.Expression) *moodEntriesDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moodEntriesDo) Returning(value interface{}, columns ...string) *moodEntriesDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moodEntriesDo) Not(conds ...gen.Condition) *moodEntriesDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moodEntriesDo) Or(conds ...gen.Condition) *moodEntriesDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moodEntriesDo) Select(conds ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moodEntriesDo) Where(conds ...gen.Condition) *moodEntriesDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moodEntriesDo) Order(conds ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moodEntriesDo) Distinct(cols ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moodEntriesDo) Omit(cols ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moodEntriesDo) Join(table schema.Tabler, on ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moodEntriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moodEntriesDo) RightJoin(table schema.Tabler, on ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moodEntriesDo) Group(cols ...field.Expr) *moodEntriesDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moodEntriesDo) Having(conds ...gen.Condition) *moodEntriesDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moodEntriesDo) Limit(limit int) *moodEntriesDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moodEntriesDo) Offset(offset int) *moodEntriesDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moodEntriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *moodEntriesDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moodEntriesDo) Unscoped() *moodEntriesDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moodEntriesDo) Create(values ...*model.MoodEntries) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moodEntriesDo) CreateInBatches(values []*model.MoodEntries, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moodEntriesDo) Save(values ...*model.MoodEntries) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moodEntriesDo) First() (*model.MoodEntries, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoodEntries), nil
	}
}

func (m moodEntriesDo) Take() (*model.MoodEntries, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoodEntries), nil
	}
}

func (m moodEntriesDo) Last() (*model.MoodEntries, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoodEntries), nil
	}
}

func (m moodEntriesDo) Find() ([]*model.MoodEntries, error) {
	result, err := m.DO.Find()
	return result.([]*model.MoodEntries), err
}

func (m moodEntriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MoodEntries, err error) {
	buf := make([]*model.MoodEntries, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moodEntriesDo) FindInBatches(result *[]*model.MoodEntries, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moodEntriesDo) Attrs(attrs ...field.AssignExpr) *moodEntriesDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moodEntriesDo) Assign(attrs ...field.AssignExpr) *moodEntriesDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moodEntriesDo) Joins(fields ...field.RelationField) *moodEntriesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moodEntriesDo) Preload(fields ...field.RelationField) *moodEntriesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moodEntriesDo) FirstOrInit() (*model.MoodEntries, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoodEntries), nil
	}
}

func (m moodEntriesDo) FirstOrCreate() (*model.MoodEntries, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoodEntries), nil
	}
}

func (m moodEntriesDo) FindByPage(offset int, limit int) (result []*model.MoodEntries, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moodEntriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moodEntriesDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moodEntriesDo) Delete(models ...*model.MoodEntries) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moodEntriesDo) withDO(do gen.Dao) *moodEntriesDo {
	m.DO = *do.(*gen.DO)
	return m
}
