// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newUserAchievements(db *gorm.DB, opts ...gen.DOOption) userAchievements {
	_userAchievements := userAchievements{}

	_userAchievements.userAchievementsDo.UseDB(db, opts...)
	_userAchievements.userAchievementsDo.UseModel(&model.UserAchievements{})

	tableName := _userAchievements.userAchievementsDo.TableName()
	_userAchievements.ALL = field.NewAsterisk(tableName)
	_userAchievements.ID = field.NewUint(tableName, "id")
	_userAchievements.UserID = field.NewUint(tableName, "user_id")
	_userAchievements.AchievementType = field.NewString(tableName, "achievement_type")
	_userAchievements.Title = field.NewString(tableName, "title")
	_userAchievements.Description = field.NewString(tableName, "description")
	_userAchievements.BadgeIcon = field.NewString(tableName, "badge_icon")
	_userAchievements.PointsEarned = field.NewInt(tableName, "points_earned")
	_userAchievements.UnlockedAt = field.NewTime(tableName, "unlocked_at")
	_userAchievements.IsFeatured = field.NewBool(tableName, "is_featured")
	_userAchievements.User = userAchievementsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_userAchievements.fillFieldMap()

	return _userAchievements
}

type userAchievements struct {
	userAchievementsDo userAchievementsDo

	ALL             field.Asterisk
	ID              field.Uint
	UserID          field.Uint
	AchievementType field.String
	Title           field.String
	Description     field.String
	BadgeIcon       field.String
	PointsEarned    field.Int
	UnlockedAt      field.Time
	IsFeatured      field.Bool
	User            userAchievementsBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userAchievements) Table(newTableName string) *userAchievements {
	u.userAchievementsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAchievements) As(alias string) *userAchievements {
	u.userAchievementsDo.DO = *(u.userAchievementsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAchievements) updateTableName(table string) *userAchievements {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.UserID = field.NewUint(table, "user_id")
	u.AchievementType = field.NewString(table, "achievement_type")
	u.Title = field.NewString(table, "title")
	u.Description = field.NewString(table, "description")
	u.BadgeIcon = field.NewString(table, "badge_icon")
	u.PointsEarned = field.NewInt(table, "points_earned")
	u.UnlockedAt = field.NewTime(table, "unlocked_at")
	u.IsFeatured = field.NewBool(table, "is_featured")

	u.fillFieldMap()

	return u
}

func (u *userAchievements) WithContext(ctx context.Context) *userAchievementsDo {
	return u.userAchievementsDo.WithContext(ctx)
}

func (u userAchievements) TableName() string { return u.userAchievementsDo.TableName() }

func (u userAchievements) Alias() string { return u.userAchievementsDo.Alias() }

func (u userAchievements) Columns(cols ...field.Expr) gen.Columns {
	return u.userAchievementsDo.Columns(cols...)
}

func (u *userAchievements) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAchievements) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["achievement_type"] = u.AchievementType
	u.fieldMap["title"] = u.Title
	u.fieldMap["description"] = u.Description
	u.fieldMap["badge_icon"] = u.BadgeIcon
	u.fieldMap["points_earned"] = u.PointsEarned
	u.fieldMap["unlocked_at"] = u.UnlockedAt
	u.fieldMap["is_featured"] = u.IsFeatured

}

func (u userAchievements) clone(db *gorm.DB) userAchievements {
	u.userAchievementsDo.ReplaceConnPool(db.Statement.ConnPool)
	u.User.db = db.Session(&gorm.Session{Initialized: true})
	u.User.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u userAchievements) replaceDB(db *gorm.DB) userAchievements {
	u.userAchievementsDo.ReplaceDB(db)
	u.User.db = db.Session(&gorm.Session{})
	return u
}

type userAchievementsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a userAchievementsBelongsToUser) Where(conds ...field.Expr) *userAchievementsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userAchievementsBelongsToUser) WithContext(ctx context.Context) *userAchievementsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userAchievementsBelongsToUser) Session(session *gorm.Session) *userAchievementsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userAchievementsBelongsToUser) Model(m *model.UserAchievements) *userAchievementsBelongsToUserTx {
	return &userAchievementsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a userAchievementsBelongsToUser) Unscoped() *userAchievementsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type userAchievementsBelongsToUserTx struct{ tx *gorm.Association }

func (a userAchievementsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a userAchievementsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userAchievementsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userAchievementsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userAchievementsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userAchievementsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a userAchievementsBelongsToUserTx) Unscoped() *userAchievementsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userAchievementsDo struct{ gen.DO }

func (u userAchievementsDo) Debug() *userAchievementsDo {
	return u.withDO(u.DO.Debug())
}

func (u userAchievementsDo) WithContext(ctx context.Context) *userAchievementsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAchievementsDo) ReadDB() *userAchievementsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAchievementsDo) WriteDB() *userAchievementsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAchievementsDo) Session(config *gorm.Session) *userAchievementsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAchievementsDo) Clauses(conds ...clause.Expression) *userAchievementsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAchievementsDo) Returning(value interface{}, columns ...string) *userAchievementsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAchievementsDo) Not(conds ...gen.Condition) *userAchievementsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAchievementsDo) Or(conds ...gen.Condition) *userAchievementsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAchievementsDo) Select(conds ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAchievementsDo) Where(conds ...gen.Condition) *userAchievementsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAchievementsDo) Order(conds ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAchievementsDo) Distinct(cols ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAchievementsDo) Omit(cols ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAchievementsDo) Join(table schema.Tabler, on ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAchievementsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAchievementsDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAchievementsDo) Group(cols ...field.Expr) *userAchievementsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAchievementsDo) Having(conds ...gen.Condition) *userAchievementsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAchievementsDo) Limit(limit int) *userAchievementsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAchievementsDo) Offset(offset int) *userAchievementsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAchievementsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAchievementsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAchievementsDo) Unscoped() *userAchievementsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAchievementsDo) Create(values ...*model.UserAchievements) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAchievementsDo) CreateInBatches(values []*model.UserAchievements, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAchievementsDo) Save(values ...*model.UserAchievements) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAchievementsDo) First() (*model.UserAchievements, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAchievements), nil
	}
}

func (u userAchievementsDo) Take() (*model.UserAchievements, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAchievements), nil
	}
}

func (u userAchievementsDo) Last() (*model.UserAchievements, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAchievements), nil
	}
}

func (u userAchievementsDo) Find() ([]*model.UserAchievements, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAchievements), err
}

func (u userAchievementsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAchievements, err error) {
	buf := make([]*model.UserAchievements, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAchievementsDo) FindInBatches(result *[]*model.UserAchievements, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAchievementsDo) Attrs(attrs ...field.AssignExpr) *userAchievementsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAchievementsDo) Assign(attrs ...field.AssignExpr) *userAchievementsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAchievementsDo) Joins(fields ...field.RelationField) *userAchievementsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAchievementsDo) Preload(fields ...field.RelationField) *userAchievementsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAchievementsDo) FirstOrInit() (*model.UserAchievements, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAchievements), nil
	}
}

func (u userAchievementsDo) FirstOrCreate() (*model.UserAchievements, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAchievements), nil
	}
}

func (u userAchievementsDo) FindByPage(offset int, limit int) (result []*model.UserAchievements, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAchievementsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAchievementsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAchievementsDo) Delete(models ...*model.UserAchievements) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAchievementsDo) withDO(do gen.Dao) *userAchievementsDo {
	u.DO = *do.(*gen.DO)
	return u
}
