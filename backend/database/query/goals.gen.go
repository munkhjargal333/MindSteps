// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newGoals(db *gorm.DB, opts ...gen.DOOption) goals {
	_goals := goals{}

	_goals.goalsDo.UseDB(db, opts...)
	_goals.goalsDo.UseModel(&model.Goals{})

	tableName := _goals.goalsDo.TableName()
	_goals.ALL = field.NewAsterisk(tableName)
	_goals.ID = field.NewUint(tableName, "id")
	_goals.UserID = field.NewUint(tableName, "user_id")
	_goals.ValueID = field.NewUint(tableName, "value_id")
	_goals.Title = field.NewString(tableName, "title")
	_goals.Description = field.NewString(tableName, "description")
	_goals.GoalType = field.NewString(tableName, "goal_type")
	_goals.TargetDate = field.NewTime(tableName, "target_date")
	_goals.Status = field.NewString(tableName, "status")
	_goals.ProgressPercentage = field.NewInt(tableName, "progress_percentage")
	_goals.IsPublic = field.NewBool(tableName, "is_public")
	_goals.CreatedAt = field.NewTime(tableName, "created_at")
	_goals.UpdatedAt = field.NewTime(tableName, "updated_at")
	_goals.CompletedAt = field.NewTime(tableName, "completed_at")
	_goals.User = goalsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_goals.Value = goalsBelongsToValue{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Value", "model.CoreValues"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Value.User", "model.Users"),
		},
	}

	_goals.fillFieldMap()

	return _goals
}

type goals struct {
	goalsDo goalsDo

	ALL                field.Asterisk
	ID                 field.Uint
	UserID             field.Uint
	ValueID            field.Uint
	Title              field.String
	Description        field.String
	GoalType           field.String
	TargetDate         field.Time
	Status             field.String
	ProgressPercentage field.Int
	IsPublic           field.Bool
	CreatedAt          field.Time
	UpdatedAt          field.Time
	CompletedAt        field.Time
	User               goalsBelongsToUser

	Value goalsBelongsToValue

	fieldMap map[string]field.Expr
}

func (g goals) Table(newTableName string) *goals {
	g.goalsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goals) As(alias string) *goals {
	g.goalsDo.DO = *(g.goalsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goals) updateTableName(table string) *goals {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.UserID = field.NewUint(table, "user_id")
	g.ValueID = field.NewUint(table, "value_id")
	g.Title = field.NewString(table, "title")
	g.Description = field.NewString(table, "description")
	g.GoalType = field.NewString(table, "goal_type")
	g.TargetDate = field.NewTime(table, "target_date")
	g.Status = field.NewString(table, "status")
	g.ProgressPercentage = field.NewInt(table, "progress_percentage")
	g.IsPublic = field.NewBool(table, "is_public")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.CompletedAt = field.NewTime(table, "completed_at")

	g.fillFieldMap()

	return g
}

func (g *goals) WithContext(ctx context.Context) *goalsDo { return g.goalsDo.WithContext(ctx) }

func (g goals) TableName() string { return g.goalsDo.TableName() }

func (g goals) Alias() string { return g.goalsDo.Alias() }

func (g goals) Columns(cols ...field.Expr) gen.Columns { return g.goalsDo.Columns(cols...) }

func (g *goals) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goals) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["value_id"] = g.ValueID
	g.fieldMap["title"] = g.Title
	g.fieldMap["description"] = g.Description
	g.fieldMap["goal_type"] = g.GoalType
	g.fieldMap["target_date"] = g.TargetDate
	g.fieldMap["status"] = g.Status
	g.fieldMap["progress_percentage"] = g.ProgressPercentage
	g.fieldMap["is_public"] = g.IsPublic
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["completed_at"] = g.CompletedAt

}

func (g goals) clone(db *gorm.DB) goals {
	g.goalsDo.ReplaceConnPool(db.Statement.ConnPool)
	g.User.db = db.Session(&gorm.Session{Initialized: true})
	g.User.db.Statement.ConnPool = db.Statement.ConnPool
	g.Value.db = db.Session(&gorm.Session{Initialized: true})
	g.Value.db.Statement.ConnPool = db.Statement.ConnPool
	return g
}

func (g goals) replaceDB(db *gorm.DB) goals {
	g.goalsDo.ReplaceDB(db)
	g.User.db = db.Session(&gorm.Session{})
	g.Value.db = db.Session(&gorm.Session{})
	return g
}

type goalsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a goalsBelongsToUser) Where(conds ...field.Expr) *goalsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a goalsBelongsToUser) WithContext(ctx context.Context) *goalsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a goalsBelongsToUser) Session(session *gorm.Session) *goalsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a goalsBelongsToUser) Model(m *model.Goals) *goalsBelongsToUserTx {
	return &goalsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a goalsBelongsToUser) Unscoped() *goalsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type goalsBelongsToUserTx struct{ tx *gorm.Association }

func (a goalsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a goalsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a goalsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a goalsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a goalsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a goalsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a goalsBelongsToUserTx) Unscoped() *goalsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type goalsBelongsToValue struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
}

func (a goalsBelongsToValue) Where(conds ...field.Expr) *goalsBelongsToValue {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a goalsBelongsToValue) WithContext(ctx context.Context) *goalsBelongsToValue {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a goalsBelongsToValue) Session(session *gorm.Session) *goalsBelongsToValue {
	a.db = a.db.Session(session)
	return &a
}

func (a goalsBelongsToValue) Model(m *model.Goals) *goalsBelongsToValueTx {
	return &goalsBelongsToValueTx{a.db.Model(m).Association(a.Name())}
}

func (a goalsBelongsToValue) Unscoped() *goalsBelongsToValue {
	a.db = a.db.Unscoped()
	return &a
}

type goalsBelongsToValueTx struct{ tx *gorm.Association }

func (a goalsBelongsToValueTx) Find() (result *model.CoreValues, err error) {
	return result, a.tx.Find(&result)
}

func (a goalsBelongsToValueTx) Append(values ...*model.CoreValues) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a goalsBelongsToValueTx) Replace(values ...*model.CoreValues) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a goalsBelongsToValueTx) Delete(values ...*model.CoreValues) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a goalsBelongsToValueTx) Clear() error {
	return a.tx.Clear()
}

func (a goalsBelongsToValueTx) Count() int64 {
	return a.tx.Count()
}

func (a goalsBelongsToValueTx) Unscoped() *goalsBelongsToValueTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type goalsDo struct{ gen.DO }

func (g goalsDo) Debug() *goalsDo {
	return g.withDO(g.DO.Debug())
}

func (g goalsDo) WithContext(ctx context.Context) *goalsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goalsDo) ReadDB() *goalsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goalsDo) WriteDB() *goalsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goalsDo) Session(config *gorm.Session) *goalsDo {
	return g.withDO(g.DO.Session(config))
}

func (g goalsDo) Clauses(conds ...clause.Expression) *goalsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goalsDo) Returning(value interface{}, columns ...string) *goalsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goalsDo) Not(conds ...gen.Condition) *goalsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goalsDo) Or(conds ...gen.Condition) *goalsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goalsDo) Select(conds ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goalsDo) Where(conds ...gen.Condition) *goalsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goalsDo) Order(conds ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goalsDo) Distinct(cols ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goalsDo) Omit(cols ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goalsDo) Join(table schema.Tabler, on ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goalsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goalsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goalsDo) RightJoin(table schema.Tabler, on ...field.Expr) *goalsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goalsDo) Group(cols ...field.Expr) *goalsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goalsDo) Having(conds ...gen.Condition) *goalsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goalsDo) Limit(limit int) *goalsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goalsDo) Offset(offset int) *goalsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goalsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goalsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goalsDo) Unscoped() *goalsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goalsDo) Create(values ...*model.Goals) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goalsDo) CreateInBatches(values []*model.Goals, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goalsDo) Save(values ...*model.Goals) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goalsDo) First() (*model.Goals, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goals), nil
	}
}

func (g goalsDo) Take() (*model.Goals, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goals), nil
	}
}

func (g goalsDo) Last() (*model.Goals, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goals), nil
	}
}

func (g goalsDo) Find() ([]*model.Goals, error) {
	result, err := g.DO.Find()
	return result.([]*model.Goals), err
}

func (g goalsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Goals, err error) {
	buf := make([]*model.Goals, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goalsDo) FindInBatches(result *[]*model.Goals, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goalsDo) Attrs(attrs ...field.AssignExpr) *goalsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goalsDo) Assign(attrs ...field.AssignExpr) *goalsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goalsDo) Joins(fields ...field.RelationField) *goalsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goalsDo) Preload(fields ...field.RelationField) *goalsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goalsDo) FirstOrInit() (*model.Goals, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goals), nil
	}
}

func (g goalsDo) FirstOrCreate() (*model.Goals, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goals), nil
	}
}

func (g goalsDo) FindByPage(offset int, limit int) (result []*model.Goals, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goalsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goalsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goalsDo) Delete(models ...*model.Goals) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goalsDo) withDO(do gen.Dao) *goalsDo {
	g.DO = *do.(*gen.DO)
	return g
}
