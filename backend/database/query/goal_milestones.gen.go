// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newGoalMilestones(db *gorm.DB, opts ...gen.DOOption) goalMilestones {
	_goalMilestones := goalMilestones{}

	_goalMilestones.goalMilestonesDo.UseDB(db, opts...)
	_goalMilestones.goalMilestonesDo.UseModel(&model.GoalMilestones{})

	tableName := _goalMilestones.goalMilestonesDo.TableName()
	_goalMilestones.ALL = field.NewAsterisk(tableName)
	_goalMilestones.ID = field.NewUint(tableName, "id")
	_goalMilestones.GoalID = field.NewUint(tableName, "goal_id")
	_goalMilestones.Title = field.NewString(tableName, "title")
	_goalMilestones.Description = field.NewString(tableName, "description")
	_goalMilestones.TargetDate = field.NewTime(tableName, "target_date")
	_goalMilestones.IsCompleted = field.NewBool(tableName, "is_completed")
	_goalMilestones.CompletedAt = field.NewTime(tableName, "completed_at")
	_goalMilestones.CreatedAt = field.NewTime(tableName, "created_at")
	_goalMilestones.Goal = goalMilestonesBelongsToGoal{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Goal", "model.Goals"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Goal.User", "model.Users"),
		},
		Value: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Goal.Value", "model.CoreValues"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Goal.Value.User", "model.Users"),
			},
		},
	}

	_goalMilestones.fillFieldMap()

	return _goalMilestones
}

type goalMilestones struct {
	goalMilestonesDo goalMilestonesDo

	ALL         field.Asterisk
	ID          field.Uint
	GoalID      field.Uint
	Title       field.String
	Description field.String
	TargetDate  field.Time
	IsCompleted field.Bool
	CompletedAt field.Time
	CreatedAt   field.Time
	Goal        goalMilestonesBelongsToGoal

	fieldMap map[string]field.Expr
}

func (g goalMilestones) Table(newTableName string) *goalMilestones {
	g.goalMilestonesDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goalMilestones) As(alias string) *goalMilestones {
	g.goalMilestonesDo.DO = *(g.goalMilestonesDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goalMilestones) updateTableName(table string) *goalMilestones {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.GoalID = field.NewUint(table, "goal_id")
	g.Title = field.NewString(table, "title")
	g.Description = field.NewString(table, "description")
	g.TargetDate = field.NewTime(table, "target_date")
	g.IsCompleted = field.NewBool(table, "is_completed")
	g.CompletedAt = field.NewTime(table, "completed_at")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *goalMilestones) WithContext(ctx context.Context) *goalMilestonesDo {
	return g.goalMilestonesDo.WithContext(ctx)
}

func (g goalMilestones) TableName() string { return g.goalMilestonesDo.TableName() }

func (g goalMilestones) Alias() string { return g.goalMilestonesDo.Alias() }

func (g goalMilestones) Columns(cols ...field.Expr) gen.Columns {
	return g.goalMilestonesDo.Columns(cols...)
}

func (g *goalMilestones) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goalMilestones) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["goal_id"] = g.GoalID
	g.fieldMap["title"] = g.Title
	g.fieldMap["description"] = g.Description
	g.fieldMap["target_date"] = g.TargetDate
	g.fieldMap["is_completed"] = g.IsCompleted
	g.fieldMap["completed_at"] = g.CompletedAt
	g.fieldMap["created_at"] = g.CreatedAt

}

func (g goalMilestones) clone(db *gorm.DB) goalMilestones {
	g.goalMilestonesDo.ReplaceConnPool(db.Statement.ConnPool)
	g.Goal.db = db.Session(&gorm.Session{Initialized: true})
	g.Goal.db.Statement.ConnPool = db.Statement.ConnPool
	return g
}

func (g goalMilestones) replaceDB(db *gorm.DB) goalMilestones {
	g.goalMilestonesDo.ReplaceDB(db)
	g.Goal.db = db.Session(&gorm.Session{})
	return g
}

type goalMilestonesBelongsToGoal struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
	Value struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a goalMilestonesBelongsToGoal) Where(conds ...field.Expr) *goalMilestonesBelongsToGoal {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a goalMilestonesBelongsToGoal) WithContext(ctx context.Context) *goalMilestonesBelongsToGoal {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a goalMilestonesBelongsToGoal) Session(session *gorm.Session) *goalMilestonesBelongsToGoal {
	a.db = a.db.Session(session)
	return &a
}

func (a goalMilestonesBelongsToGoal) Model(m *model.GoalMilestones) *goalMilestonesBelongsToGoalTx {
	return &goalMilestonesBelongsToGoalTx{a.db.Model(m).Association(a.Name())}
}

func (a goalMilestonesBelongsToGoal) Unscoped() *goalMilestonesBelongsToGoal {
	a.db = a.db.Unscoped()
	return &a
}

type goalMilestonesBelongsToGoalTx struct{ tx *gorm.Association }

func (a goalMilestonesBelongsToGoalTx) Find() (result *model.Goals, err error) {
	return result, a.tx.Find(&result)
}

func (a goalMilestonesBelongsToGoalTx) Append(values ...*model.Goals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a goalMilestonesBelongsToGoalTx) Replace(values ...*model.Goals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a goalMilestonesBelongsToGoalTx) Delete(values ...*model.Goals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a goalMilestonesBelongsToGoalTx) Clear() error {
	return a.tx.Clear()
}

func (a goalMilestonesBelongsToGoalTx) Count() int64 {
	return a.tx.Count()
}

func (a goalMilestonesBelongsToGoalTx) Unscoped() *goalMilestonesBelongsToGoalTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type goalMilestonesDo struct{ gen.DO }

func (g goalMilestonesDo) Debug() *goalMilestonesDo {
	return g.withDO(g.DO.Debug())
}

func (g goalMilestonesDo) WithContext(ctx context.Context) *goalMilestonesDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goalMilestonesDo) ReadDB() *goalMilestonesDo {
	return g.Clauses(dbresolver.Read)
}

func (g goalMilestonesDo) WriteDB() *goalMilestonesDo {
	return g.Clauses(dbresolver.Write)
}

func (g goalMilestonesDo) Session(config *gorm.Session) *goalMilestonesDo {
	return g.withDO(g.DO.Session(config))
}

func (g goalMilestonesDo) Clauses(conds ...clause.Expression) *goalMilestonesDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goalMilestonesDo) Returning(value interface{}, columns ...string) *goalMilestonesDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goalMilestonesDo) Not(conds ...gen.Condition) *goalMilestonesDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goalMilestonesDo) Or(conds ...gen.Condition) *goalMilestonesDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goalMilestonesDo) Select(conds ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goalMilestonesDo) Where(conds ...gen.Condition) *goalMilestonesDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goalMilestonesDo) Order(conds ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goalMilestonesDo) Distinct(cols ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goalMilestonesDo) Omit(cols ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goalMilestonesDo) Join(table schema.Tabler, on ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goalMilestonesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goalMilestonesDo) RightJoin(table schema.Tabler, on ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goalMilestonesDo) Group(cols ...field.Expr) *goalMilestonesDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goalMilestonesDo) Having(conds ...gen.Condition) *goalMilestonesDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goalMilestonesDo) Limit(limit int) *goalMilestonesDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goalMilestonesDo) Offset(offset int) *goalMilestonesDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goalMilestonesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goalMilestonesDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goalMilestonesDo) Unscoped() *goalMilestonesDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goalMilestonesDo) Create(values ...*model.GoalMilestones) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goalMilestonesDo) CreateInBatches(values []*model.GoalMilestones, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goalMilestonesDo) Save(values ...*model.GoalMilestones) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goalMilestonesDo) First() (*model.GoalMilestones, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoalMilestones), nil
	}
}

func (g goalMilestonesDo) Take() (*model.GoalMilestones, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoalMilestones), nil
	}
}

func (g goalMilestonesDo) Last() (*model.GoalMilestones, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoalMilestones), nil
	}
}

func (g goalMilestonesDo) Find() ([]*model.GoalMilestones, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoalMilestones), err
}

func (g goalMilestonesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoalMilestones, err error) {
	buf := make([]*model.GoalMilestones, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goalMilestonesDo) FindInBatches(result *[]*model.GoalMilestones, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goalMilestonesDo) Attrs(attrs ...field.AssignExpr) *goalMilestonesDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goalMilestonesDo) Assign(attrs ...field.AssignExpr) *goalMilestonesDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goalMilestonesDo) Joins(fields ...field.RelationField) *goalMilestonesDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goalMilestonesDo) Preload(fields ...field.RelationField) *goalMilestonesDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goalMilestonesDo) FirstOrInit() (*model.GoalMilestones, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoalMilestones), nil
	}
}

func (g goalMilestonesDo) FirstOrCreate() (*model.GoalMilestones, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoalMilestones), nil
	}
}

func (g goalMilestonesDo) FindByPage(offset int, limit int) (result []*model.GoalMilestones, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goalMilestonesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goalMilestonesDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goalMilestonesDo) Delete(models ...*model.GoalMilestones) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goalMilestonesDo) withDO(do gen.Dao) *goalMilestonesDo {
	g.DO = *do.(*gen.DO)
	return g
}
