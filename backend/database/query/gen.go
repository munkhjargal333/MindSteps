// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		AIJournalDetailedAnalysis: newAIJournalDetailedAnalysis(db, opts...),
		AIMoodAnalysis:            newAIMoodAnalysis(db, opts...),
		AIProgressTracking:        newAIProgressTracking(db, opts...),
		AIScoringCriteria:         newAIScoringCriteria(db, opts...),
		AuthOTP:                   newAuthOTP(db, opts...),
		CoreValues:                newCoreValues(db, opts...),
		GoalMilestones:            newGoalMilestones(db, opts...),
		Goals:                     newGoals(db, opts...),
		Journals:                  newJournals(db, opts...),
		LessonCategories:          newLessonCategories(db, opts...),
		LessonComments:            newLessonComments(db, opts...),
		LessonReactions:           newLessonReactions(db, opts...),
		Lessons:                   newLessons(db, opts...),
		MeditationSessions:        newMeditationSessions(db, opts...),
		MeditationTechniques:      newMeditationTechniques(db, opts...),
		MoodCategories:            newMoodCategories(db, opts...),
		MoodEntries:               newMoodEntries(db, opts...),
		Moods:                     newMoods(db, opts...),
		Notifications:             newNotifications(db, opts...),
		ProgressReports:           newProgressReports(db, opts...),
		RoleOwners:                newRoleOwners(db, opts...),
		Roles:                     newRoles(db, opts...),
		ScoringHistory:            newScoringHistory(db, opts...),
		UserAchievements:          newUserAchievements(db, opts...),
		UserInsights:              newUserInsights(db, opts...),
		UserLessonProgress:        newUserLessonProgress(db, opts...),
		UserLevels:                newUserLevels(db, opts...),
		UserPreferences:           newUserPreferences(db, opts...),
		UserStreaks:               newUserStreaks(db, opts...),
		Users:                     newUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AIJournalDetailedAnalysis aIJournalDetailedAnalysis
	AIMoodAnalysis            aIMoodAnalysis
	AIProgressTracking        aIProgressTracking
	AIScoringCriteria         aIScoringCriteria
	AuthOTP                   authOTP
	CoreValues                coreValues
	GoalMilestones            goalMilestones
	Goals                     goals
	Journals                  journals
	LessonCategories          lessonCategories
	LessonComments            lessonComments
	LessonReactions           lessonReactions
	Lessons                   lessons
	MeditationSessions        meditationSessions
	MeditationTechniques      meditationTechniques
	MoodCategories            moodCategories
	MoodEntries               moodEntries
	Moods                     moods
	Notifications             notifications
	ProgressReports           progressReports
	RoleOwners                roleOwners
	Roles                     roles
	ScoringHistory            scoringHistory
	UserAchievements          userAchievements
	UserInsights              userInsights
	UserLessonProgress        userLessonProgress
	UserLevels                userLevels
	UserPreferences           userPreferences
	UserStreaks               userStreaks
	Users                     users
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		AIJournalDetailedAnalysis: q.AIJournalDetailedAnalysis.clone(db),
		AIMoodAnalysis:            q.AIMoodAnalysis.clone(db),
		AIProgressTracking:        q.AIProgressTracking.clone(db),
		AIScoringCriteria:         q.AIScoringCriteria.clone(db),
		AuthOTP:                   q.AuthOTP.clone(db),
		CoreValues:                q.CoreValues.clone(db),
		GoalMilestones:            q.GoalMilestones.clone(db),
		Goals:                     q.Goals.clone(db),
		Journals:                  q.Journals.clone(db),
		LessonCategories:          q.LessonCategories.clone(db),
		LessonComments:            q.LessonComments.clone(db),
		LessonReactions:           q.LessonReactions.clone(db),
		Lessons:                   q.Lessons.clone(db),
		MeditationSessions:        q.MeditationSessions.clone(db),
		MeditationTechniques:      q.MeditationTechniques.clone(db),
		MoodCategories:            q.MoodCategories.clone(db),
		MoodEntries:               q.MoodEntries.clone(db),
		Moods:                     q.Moods.clone(db),
		Notifications:             q.Notifications.clone(db),
		ProgressReports:           q.ProgressReports.clone(db),
		RoleOwners:                q.RoleOwners.clone(db),
		Roles:                     q.Roles.clone(db),
		ScoringHistory:            q.ScoringHistory.clone(db),
		UserAchievements:          q.UserAchievements.clone(db),
		UserInsights:              q.UserInsights.clone(db),
		UserLessonProgress:        q.UserLessonProgress.clone(db),
		UserLevels:                q.UserLevels.clone(db),
		UserPreferences:           q.UserPreferences.clone(db),
		UserStreaks:               q.UserStreaks.clone(db),
		Users:                     q.Users.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		AIJournalDetailedAnalysis: q.AIJournalDetailedAnalysis.replaceDB(db),
		AIMoodAnalysis:            q.AIMoodAnalysis.replaceDB(db),
		AIProgressTracking:        q.AIProgressTracking.replaceDB(db),
		AIScoringCriteria:         q.AIScoringCriteria.replaceDB(db),
		AuthOTP:                   q.AuthOTP.replaceDB(db),
		CoreValues:                q.CoreValues.replaceDB(db),
		GoalMilestones:            q.GoalMilestones.replaceDB(db),
		Goals:                     q.Goals.replaceDB(db),
		Journals:                  q.Journals.replaceDB(db),
		LessonCategories:          q.LessonCategories.replaceDB(db),
		LessonComments:            q.LessonComments.replaceDB(db),
		LessonReactions:           q.LessonReactions.replaceDB(db),
		Lessons:                   q.Lessons.replaceDB(db),
		MeditationSessions:        q.MeditationSessions.replaceDB(db),
		MeditationTechniques:      q.MeditationTechniques.replaceDB(db),
		MoodCategories:            q.MoodCategories.replaceDB(db),
		MoodEntries:               q.MoodEntries.replaceDB(db),
		Moods:                     q.Moods.replaceDB(db),
		Notifications:             q.Notifications.replaceDB(db),
		ProgressReports:           q.ProgressReports.replaceDB(db),
		RoleOwners:                q.RoleOwners.replaceDB(db),
		Roles:                     q.Roles.replaceDB(db),
		ScoringHistory:            q.ScoringHistory.replaceDB(db),
		UserAchievements:          q.UserAchievements.replaceDB(db),
		UserInsights:              q.UserInsights.replaceDB(db),
		UserLessonProgress:        q.UserLessonProgress.replaceDB(db),
		UserLevels:                q.UserLevels.replaceDB(db),
		UserPreferences:           q.UserPreferences.replaceDB(db),
		UserStreaks:               q.UserStreaks.replaceDB(db),
		Users:                     q.Users.replaceDB(db),
	}
}

type queryCtx struct {
	AIJournalDetailedAnalysis *aIJournalDetailedAnalysisDo
	AIMoodAnalysis            *aIMoodAnalysisDo
	AIProgressTracking        *aIProgressTrackingDo
	AIScoringCriteria         *aIScoringCriteriaDo
	AuthOTP                   *authOTPDo
	CoreValues                *coreValuesDo
	GoalMilestones            *goalMilestonesDo
	Goals                     *goalsDo
	Journals                  *journalsDo
	LessonCategories          *lessonCategoriesDo
	LessonComments            *lessonCommentsDo
	LessonReactions           *lessonReactionsDo
	Lessons                   *lessonsDo
	MeditationSessions        *meditationSessionsDo
	MeditationTechniques      *meditationTechniquesDo
	MoodCategories            *moodCategoriesDo
	MoodEntries               *moodEntriesDo
	Moods                     *moodsDo
	Notifications             *notificationsDo
	ProgressReports           *progressReportsDo
	RoleOwners                *roleOwnersDo
	Roles                     *rolesDo
	ScoringHistory            *scoringHistoryDo
	UserAchievements          *userAchievementsDo
	UserInsights              *userInsightsDo
	UserLessonProgress        *userLessonProgressDo
	UserLevels                *userLevelsDo
	UserPreferences           *userPreferencesDo
	UserStreaks               *userStreaksDo
	Users                     *usersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AIJournalDetailedAnalysis: q.AIJournalDetailedAnalysis.WithContext(ctx),
		AIMoodAnalysis:            q.AIMoodAnalysis.WithContext(ctx),
		AIProgressTracking:        q.AIProgressTracking.WithContext(ctx),
		AIScoringCriteria:         q.AIScoringCriteria.WithContext(ctx),
		AuthOTP:                   q.AuthOTP.WithContext(ctx),
		CoreValues:                q.CoreValues.WithContext(ctx),
		GoalMilestones:            q.GoalMilestones.WithContext(ctx),
		Goals:                     q.Goals.WithContext(ctx),
		Journals:                  q.Journals.WithContext(ctx),
		LessonCategories:          q.LessonCategories.WithContext(ctx),
		LessonComments:            q.LessonComments.WithContext(ctx),
		LessonReactions:           q.LessonReactions.WithContext(ctx),
		Lessons:                   q.Lessons.WithContext(ctx),
		MeditationSessions:        q.MeditationSessions.WithContext(ctx),
		MeditationTechniques:      q.MeditationTechniques.WithContext(ctx),
		MoodCategories:            q.MoodCategories.WithContext(ctx),
		MoodEntries:               q.MoodEntries.WithContext(ctx),
		Moods:                     q.Moods.WithContext(ctx),
		Notifications:             q.Notifications.WithContext(ctx),
		ProgressReports:           q.ProgressReports.WithContext(ctx),
		RoleOwners:                q.RoleOwners.WithContext(ctx),
		Roles:                     q.Roles.WithContext(ctx),
		ScoringHistory:            q.ScoringHistory.WithContext(ctx),
		UserAchievements:          q.UserAchievements.WithContext(ctx),
		UserInsights:              q.UserInsights.WithContext(ctx),
		UserLessonProgress:        q.UserLessonProgress.WithContext(ctx),
		UserLevels:                q.UserLevels.WithContext(ctx),
		UserPreferences:           q.UserPreferences.WithContext(ctx),
		UserStreaks:               q.UserStreaks.WithContext(ctx),
		Users:                     q.Users.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
