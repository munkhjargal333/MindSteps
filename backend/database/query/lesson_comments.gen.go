// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newLessonComments(db *gorm.DB, opts ...gen.DOOption) lessonComments {
	_lessonComments := lessonComments{}

	_lessonComments.lessonCommentsDo.UseDB(db, opts...)
	_lessonComments.lessonCommentsDo.UseModel(&model.LessonComments{})

	tableName := _lessonComments.lessonCommentsDo.TableName()
	_lessonComments.ALL = field.NewAsterisk(tableName)
	_lessonComments.ID = field.NewUint(tableName, "id")
	_lessonComments.LessonID = field.NewUint(tableName, "lesson_id")
	_lessonComments.UserID = field.NewUint(tableName, "user_id")
	_lessonComments.ParentID = field.NewUint(tableName, "parent_id")
	_lessonComments.Content = field.NewString(tableName, "content")
	_lessonComments.IsEdited = field.NewBool(tableName, "is_edited")
	_lessonComments.IsDeleted = field.NewBool(tableName, "is_deleted")
	_lessonComments.CreatedAt = field.NewTime(tableName, "created_at")
	_lessonComments.UpdatedAt = field.NewTime(tableName, "updated_at")
	_lessonComments.Lesson = lessonCommentsBelongsToLesson{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lesson", "model.Lessons"),
		Category: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lesson.Category", "model.LessonCategories"),
		},
	}

	_lessonComments.User = lessonCommentsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_lessonComments.fillFieldMap()

	return _lessonComments
}

type lessonComments struct {
	lessonCommentsDo lessonCommentsDo

	ALL       field.Asterisk
	ID        field.Uint
	LessonID  field.Uint
	UserID    field.Uint
	ParentID  field.Uint
	Content   field.String
	IsEdited  field.Bool
	IsDeleted field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time
	Lesson    lessonCommentsBelongsToLesson

	User lessonCommentsBelongsToUser

	fieldMap map[string]field.Expr
}

func (l lessonComments) Table(newTableName string) *lessonComments {
	l.lessonCommentsDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lessonComments) As(alias string) *lessonComments {
	l.lessonCommentsDo.DO = *(l.lessonCommentsDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lessonComments) updateTableName(table string) *lessonComments {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.LessonID = field.NewUint(table, "lesson_id")
	l.UserID = field.NewUint(table, "user_id")
	l.ParentID = field.NewUint(table, "parent_id")
	l.Content = field.NewString(table, "content")
	l.IsEdited = field.NewBool(table, "is_edited")
	l.IsDeleted = field.NewBool(table, "is_deleted")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *lessonComments) WithContext(ctx context.Context) *lessonCommentsDo {
	return l.lessonCommentsDo.WithContext(ctx)
}

func (l lessonComments) TableName() string { return l.lessonCommentsDo.TableName() }

func (l lessonComments) Alias() string { return l.lessonCommentsDo.Alias() }

func (l lessonComments) Columns(cols ...field.Expr) gen.Columns {
	return l.lessonCommentsDo.Columns(cols...)
}

func (l *lessonComments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lessonComments) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["id"] = l.ID
	l.fieldMap["lesson_id"] = l.LessonID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["parent_id"] = l.ParentID
	l.fieldMap["content"] = l.Content
	l.fieldMap["is_edited"] = l.IsEdited
	l.fieldMap["is_deleted"] = l.IsDeleted
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt

}

func (l lessonComments) clone(db *gorm.DB) lessonComments {
	l.lessonCommentsDo.ReplaceConnPool(db.Statement.ConnPool)
	l.Lesson.db = db.Session(&gorm.Session{Initialized: true})
	l.Lesson.db.Statement.ConnPool = db.Statement.ConnPool
	l.User.db = db.Session(&gorm.Session{Initialized: true})
	l.User.db.Statement.ConnPool = db.Statement.ConnPool
	return l
}

func (l lessonComments) replaceDB(db *gorm.DB) lessonComments {
	l.lessonCommentsDo.ReplaceDB(db)
	l.Lesson.db = db.Session(&gorm.Session{})
	l.User.db = db.Session(&gorm.Session{})
	return l
}

type lessonCommentsBelongsToLesson struct {
	db *gorm.DB

	field.RelationField

	Category struct {
		field.RelationField
	}
}

func (a lessonCommentsBelongsToLesson) Where(conds ...field.Expr) *lessonCommentsBelongsToLesson {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a lessonCommentsBelongsToLesson) WithContext(ctx context.Context) *lessonCommentsBelongsToLesson {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a lessonCommentsBelongsToLesson) Session(session *gorm.Session) *lessonCommentsBelongsToLesson {
	a.db = a.db.Session(session)
	return &a
}

func (a lessonCommentsBelongsToLesson) Model(m *model.LessonComments) *lessonCommentsBelongsToLessonTx {
	return &lessonCommentsBelongsToLessonTx{a.db.Model(m).Association(a.Name())}
}

func (a lessonCommentsBelongsToLesson) Unscoped() *lessonCommentsBelongsToLesson {
	a.db = a.db.Unscoped()
	return &a
}

type lessonCommentsBelongsToLessonTx struct{ tx *gorm.Association }

func (a lessonCommentsBelongsToLessonTx) Find() (result *model.Lessons, err error) {
	return result, a.tx.Find(&result)
}

func (a lessonCommentsBelongsToLessonTx) Append(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a lessonCommentsBelongsToLessonTx) Replace(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a lessonCommentsBelongsToLessonTx) Delete(values ...*model.Lessons) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a lessonCommentsBelongsToLessonTx) Clear() error {
	return a.tx.Clear()
}

func (a lessonCommentsBelongsToLessonTx) Count() int64 {
	return a.tx.Count()
}

func (a lessonCommentsBelongsToLessonTx) Unscoped() *lessonCommentsBelongsToLessonTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type lessonCommentsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a lessonCommentsBelongsToUser) Where(conds ...field.Expr) *lessonCommentsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a lessonCommentsBelongsToUser) WithContext(ctx context.Context) *lessonCommentsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a lessonCommentsBelongsToUser) Session(session *gorm.Session) *lessonCommentsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a lessonCommentsBelongsToUser) Model(m *model.LessonComments) *lessonCommentsBelongsToUserTx {
	return &lessonCommentsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a lessonCommentsBelongsToUser) Unscoped() *lessonCommentsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type lessonCommentsBelongsToUserTx struct{ tx *gorm.Association }

func (a lessonCommentsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a lessonCommentsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a lessonCommentsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a lessonCommentsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a lessonCommentsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a lessonCommentsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a lessonCommentsBelongsToUserTx) Unscoped() *lessonCommentsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type lessonCommentsDo struct{ gen.DO }

func (l lessonCommentsDo) Debug() *lessonCommentsDo {
	return l.withDO(l.DO.Debug())
}

func (l lessonCommentsDo) WithContext(ctx context.Context) *lessonCommentsDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lessonCommentsDo) ReadDB() *lessonCommentsDo {
	return l.Clauses(dbresolver.Read)
}

func (l lessonCommentsDo) WriteDB() *lessonCommentsDo {
	return l.Clauses(dbresolver.Write)
}

func (l lessonCommentsDo) Session(config *gorm.Session) *lessonCommentsDo {
	return l.withDO(l.DO.Session(config))
}

func (l lessonCommentsDo) Clauses(conds ...clause.Expression) *lessonCommentsDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lessonCommentsDo) Returning(value interface{}, columns ...string) *lessonCommentsDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lessonCommentsDo) Not(conds ...gen.Condition) *lessonCommentsDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lessonCommentsDo) Or(conds ...gen.Condition) *lessonCommentsDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lessonCommentsDo) Select(conds ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lessonCommentsDo) Where(conds ...gen.Condition) *lessonCommentsDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lessonCommentsDo) Order(conds ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lessonCommentsDo) Distinct(cols ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lessonCommentsDo) Omit(cols ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lessonCommentsDo) Join(table schema.Tabler, on ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lessonCommentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lessonCommentsDo) RightJoin(table schema.Tabler, on ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lessonCommentsDo) Group(cols ...field.Expr) *lessonCommentsDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lessonCommentsDo) Having(conds ...gen.Condition) *lessonCommentsDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lessonCommentsDo) Limit(limit int) *lessonCommentsDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lessonCommentsDo) Offset(offset int) *lessonCommentsDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lessonCommentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lessonCommentsDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lessonCommentsDo) Unscoped() *lessonCommentsDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lessonCommentsDo) Create(values ...*model.LessonComments) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lessonCommentsDo) CreateInBatches(values []*model.LessonComments, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lessonCommentsDo) Save(values ...*model.LessonComments) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lessonCommentsDo) First() (*model.LessonComments, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonComments), nil
	}
}

func (l lessonCommentsDo) Take() (*model.LessonComments, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonComments), nil
	}
}

func (l lessonCommentsDo) Last() (*model.LessonComments, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonComments), nil
	}
}

func (l lessonCommentsDo) Find() ([]*model.LessonComments, error) {
	result, err := l.DO.Find()
	return result.([]*model.LessonComments), err
}

func (l lessonCommentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LessonComments, err error) {
	buf := make([]*model.LessonComments, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lessonCommentsDo) FindInBatches(result *[]*model.LessonComments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lessonCommentsDo) Attrs(attrs ...field.AssignExpr) *lessonCommentsDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lessonCommentsDo) Assign(attrs ...field.AssignExpr) *lessonCommentsDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lessonCommentsDo) Joins(fields ...field.RelationField) *lessonCommentsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lessonCommentsDo) Preload(fields ...field.RelationField) *lessonCommentsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lessonCommentsDo) FirstOrInit() (*model.LessonComments, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonComments), nil
	}
}

func (l lessonCommentsDo) FirstOrCreate() (*model.LessonComments, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonComments), nil
	}
}

func (l lessonCommentsDo) FindByPage(offset int, limit int) (result []*model.LessonComments, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lessonCommentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lessonCommentsDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lessonCommentsDo) Delete(models ...*model.LessonComments) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lessonCommentsDo) withDO(do gen.Dao) *lessonCommentsDo {
	l.DO = *do.(*gen.DO)
	return l
}
