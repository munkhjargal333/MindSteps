// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newScoringHistory(db *gorm.DB, opts ...gen.DOOption) scoringHistory {
	_scoringHistory := scoringHistory{}

	_scoringHistory.scoringHistoryDo.UseDB(db, opts...)
	_scoringHistory.scoringHistoryDo.UseModel(&model.ScoringHistory{})

	tableName := _scoringHistory.scoringHistoryDo.TableName()
	_scoringHistory.ALL = field.NewAsterisk(tableName)
	_scoringHistory.ID = field.NewUint(tableName, "id")
	_scoringHistory.UserID = field.NewUint(tableName, "user_id")
	_scoringHistory.SourceType = field.NewString(tableName, "source_type")
	_scoringHistory.SourceID = field.NewInt(tableName, "source_id")
	_scoringHistory.PointsEarned = field.NewInt(tableName, "points_earned")
	_scoringHistory.PointsType = field.NewString(tableName, "points_type")
	_scoringHistory.Description = field.NewString(tableName, "description")
	_scoringHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_scoringHistory.User = scoringHistoryBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_scoringHistory.fillFieldMap()

	return _scoringHistory
}

type scoringHistory struct {
	scoringHistoryDo scoringHistoryDo

	ALL          field.Asterisk
	ID           field.Uint
	UserID       field.Uint
	SourceType   field.String
	SourceID     field.Int
	PointsEarned field.Int
	PointsType   field.String
	Description  field.String
	CreatedAt    field.Time
	User         scoringHistoryBelongsToUser

	fieldMap map[string]field.Expr
}

func (s scoringHistory) Table(newTableName string) *scoringHistory {
	s.scoringHistoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scoringHistory) As(alias string) *scoringHistory {
	s.scoringHistoryDo.DO = *(s.scoringHistoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scoringHistory) updateTableName(table string) *scoringHistory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.UserID = field.NewUint(table, "user_id")
	s.SourceType = field.NewString(table, "source_type")
	s.SourceID = field.NewInt(table, "source_id")
	s.PointsEarned = field.NewInt(table, "points_earned")
	s.PointsType = field.NewString(table, "points_type")
	s.Description = field.NewString(table, "description")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *scoringHistory) WithContext(ctx context.Context) *scoringHistoryDo {
	return s.scoringHistoryDo.WithContext(ctx)
}

func (s scoringHistory) TableName() string { return s.scoringHistoryDo.TableName() }

func (s scoringHistory) Alias() string { return s.scoringHistoryDo.Alias() }

func (s scoringHistory) Columns(cols ...field.Expr) gen.Columns {
	return s.scoringHistoryDo.Columns(cols...)
}

func (s *scoringHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scoringHistory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["source_type"] = s.SourceType
	s.fieldMap["source_id"] = s.SourceID
	s.fieldMap["points_earned"] = s.PointsEarned
	s.fieldMap["points_type"] = s.PointsType
	s.fieldMap["description"] = s.Description
	s.fieldMap["created_at"] = s.CreatedAt

}

func (s scoringHistory) clone(db *gorm.DB) scoringHistory {
	s.scoringHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	s.User.db = db.Session(&gorm.Session{Initialized: true})
	s.User.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s scoringHistory) replaceDB(db *gorm.DB) scoringHistory {
	s.scoringHistoryDo.ReplaceDB(db)
	s.User.db = db.Session(&gorm.Session{})
	return s
}

type scoringHistoryBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a scoringHistoryBelongsToUser) Where(conds ...field.Expr) *scoringHistoryBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a scoringHistoryBelongsToUser) WithContext(ctx context.Context) *scoringHistoryBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a scoringHistoryBelongsToUser) Session(session *gorm.Session) *scoringHistoryBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a scoringHistoryBelongsToUser) Model(m *model.ScoringHistory) *scoringHistoryBelongsToUserTx {
	return &scoringHistoryBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a scoringHistoryBelongsToUser) Unscoped() *scoringHistoryBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type scoringHistoryBelongsToUserTx struct{ tx *gorm.Association }

func (a scoringHistoryBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a scoringHistoryBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a scoringHistoryBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a scoringHistoryBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a scoringHistoryBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a scoringHistoryBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a scoringHistoryBelongsToUserTx) Unscoped() *scoringHistoryBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type scoringHistoryDo struct{ gen.DO }

func (s scoringHistoryDo) Debug() *scoringHistoryDo {
	return s.withDO(s.DO.Debug())
}

func (s scoringHistoryDo) WithContext(ctx context.Context) *scoringHistoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoringHistoryDo) ReadDB() *scoringHistoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoringHistoryDo) WriteDB() *scoringHistoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoringHistoryDo) Session(config *gorm.Session) *scoringHistoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoringHistoryDo) Clauses(conds ...clause.Expression) *scoringHistoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoringHistoryDo) Returning(value interface{}, columns ...string) *scoringHistoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoringHistoryDo) Not(conds ...gen.Condition) *scoringHistoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoringHistoryDo) Or(conds ...gen.Condition) *scoringHistoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoringHistoryDo) Select(conds ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoringHistoryDo) Where(conds ...gen.Condition) *scoringHistoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoringHistoryDo) Order(conds ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoringHistoryDo) Distinct(cols ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoringHistoryDo) Omit(cols ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoringHistoryDo) Join(table schema.Tabler, on ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoringHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoringHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoringHistoryDo) Group(cols ...field.Expr) *scoringHistoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoringHistoryDo) Having(conds ...gen.Condition) *scoringHistoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoringHistoryDo) Limit(limit int) *scoringHistoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoringHistoryDo) Offset(offset int) *scoringHistoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoringHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *scoringHistoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoringHistoryDo) Unscoped() *scoringHistoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoringHistoryDo) Create(values ...*model.ScoringHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoringHistoryDo) CreateInBatches(values []*model.ScoringHistory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoringHistoryDo) Save(values ...*model.ScoringHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoringHistoryDo) First() (*model.ScoringHistory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringHistory), nil
	}
}

func (s scoringHistoryDo) Take() (*model.ScoringHistory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringHistory), nil
	}
}

func (s scoringHistoryDo) Last() (*model.ScoringHistory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringHistory), nil
	}
}

func (s scoringHistoryDo) Find() ([]*model.ScoringHistory, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScoringHistory), err
}

func (s scoringHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScoringHistory, err error) {
	buf := make([]*model.ScoringHistory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoringHistoryDo) FindInBatches(result *[]*model.ScoringHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoringHistoryDo) Attrs(attrs ...field.AssignExpr) *scoringHistoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoringHistoryDo) Assign(attrs ...field.AssignExpr) *scoringHistoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoringHistoryDo) Joins(fields ...field.RelationField) *scoringHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoringHistoryDo) Preload(fields ...field.RelationField) *scoringHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoringHistoryDo) FirstOrInit() (*model.ScoringHistory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringHistory), nil
	}
}

func (s scoringHistoryDo) FirstOrCreate() (*model.ScoringHistory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringHistory), nil
	}
}

func (s scoringHistoryDo) FindByPage(offset int, limit int) (result []*model.ScoringHistory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoringHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoringHistoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoringHistoryDo) Delete(models ...*model.ScoringHistory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoringHistoryDo) withDO(do gen.Dao) *scoringHistoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
