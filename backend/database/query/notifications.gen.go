// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newNotifications(db *gorm.DB, opts ...gen.DOOption) notifications {
	_notifications := notifications{}

	_notifications.notificationsDo.UseDB(db, opts...)
	_notifications.notificationsDo.UseModel(&model.Notifications{})

	tableName := _notifications.notificationsDo.TableName()
	_notifications.ALL = field.NewAsterisk(tableName)
	_notifications.ID = field.NewUint(tableName, "id")
	_notifications.UserID = field.NewUint(tableName, "user_id")
	_notifications.Title = field.NewString(tableName, "title")
	_notifications.Message = field.NewString(tableName, "message")
	_notifications.NotificationType = field.NewString(tableName, "notification_type")
	_notifications.IsRead = field.NewBool(tableName, "is_read")
	_notifications.ActionURL = field.NewString(tableName, "action_url")
	_notifications.ScheduledFor = field.NewTime(tableName, "scheduled_for")
	_notifications.SentAt = field.NewTime(tableName, "sent_at")
	_notifications.CreatedAt = field.NewTime(tableName, "created_at")
	_notifications.User = notificationsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_notifications.fillFieldMap()

	return _notifications
}

type notifications struct {
	notificationsDo notificationsDo

	ALL              field.Asterisk
	ID               field.Uint
	UserID           field.Uint
	Title            field.String
	Message          field.String
	NotificationType field.String
	IsRead           field.Bool
	ActionURL        field.String
	ScheduledFor     field.Time
	SentAt           field.Time
	CreatedAt        field.Time
	User             notificationsBelongsToUser

	fieldMap map[string]field.Expr
}

func (n notifications) Table(newTableName string) *notifications {
	n.notificationsDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notifications) As(alias string) *notifications {
	n.notificationsDo.DO = *(n.notificationsDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notifications) updateTableName(table string) *notifications {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint(table, "id")
	n.UserID = field.NewUint(table, "user_id")
	n.Title = field.NewString(table, "title")
	n.Message = field.NewString(table, "message")
	n.NotificationType = field.NewString(table, "notification_type")
	n.IsRead = field.NewBool(table, "is_read")
	n.ActionURL = field.NewString(table, "action_url")
	n.ScheduledFor = field.NewTime(table, "scheduled_for")
	n.SentAt = field.NewTime(table, "sent_at")
	n.CreatedAt = field.NewTime(table, "created_at")

	n.fillFieldMap()

	return n
}

func (n *notifications) WithContext(ctx context.Context) *notificationsDo {
	return n.notificationsDo.WithContext(ctx)
}

func (n notifications) TableName() string { return n.notificationsDo.TableName() }

func (n notifications) Alias() string { return n.notificationsDo.Alias() }

func (n notifications) Columns(cols ...field.Expr) gen.Columns {
	return n.notificationsDo.Columns(cols...)
}

func (n *notifications) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notifications) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 11)
	n.fieldMap["id"] = n.ID
	n.fieldMap["user_id"] = n.UserID
	n.fieldMap["title"] = n.Title
	n.fieldMap["message"] = n.Message
	n.fieldMap["notification_type"] = n.NotificationType
	n.fieldMap["is_read"] = n.IsRead
	n.fieldMap["action_url"] = n.ActionURL
	n.fieldMap["scheduled_for"] = n.ScheduledFor
	n.fieldMap["sent_at"] = n.SentAt
	n.fieldMap["created_at"] = n.CreatedAt

}

func (n notifications) clone(db *gorm.DB) notifications {
	n.notificationsDo.ReplaceConnPool(db.Statement.ConnPool)
	n.User.db = db.Session(&gorm.Session{Initialized: true})
	n.User.db.Statement.ConnPool = db.Statement.ConnPool
	return n
}

func (n notifications) replaceDB(db *gorm.DB) notifications {
	n.notificationsDo.ReplaceDB(db)
	n.User.db = db.Session(&gorm.Session{})
	return n
}

type notificationsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a notificationsBelongsToUser) Where(conds ...field.Expr) *notificationsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a notificationsBelongsToUser) WithContext(ctx context.Context) *notificationsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a notificationsBelongsToUser) Session(session *gorm.Session) *notificationsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a notificationsBelongsToUser) Model(m *model.Notifications) *notificationsBelongsToUserTx {
	return &notificationsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a notificationsBelongsToUser) Unscoped() *notificationsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type notificationsBelongsToUserTx struct{ tx *gorm.Association }

func (a notificationsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a notificationsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a notificationsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a notificationsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a notificationsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a notificationsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a notificationsBelongsToUserTx) Unscoped() *notificationsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type notificationsDo struct{ gen.DO }

func (n notificationsDo) Debug() *notificationsDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationsDo) WithContext(ctx context.Context) *notificationsDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationsDo) ReadDB() *notificationsDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationsDo) WriteDB() *notificationsDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationsDo) Session(config *gorm.Session) *notificationsDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationsDo) Clauses(conds ...clause.Expression) *notificationsDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationsDo) Returning(value interface{}, columns ...string) *notificationsDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationsDo) Not(conds ...gen.Condition) *notificationsDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationsDo) Or(conds ...gen.Condition) *notificationsDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationsDo) Select(conds ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationsDo) Where(conds ...gen.Condition) *notificationsDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationsDo) Order(conds ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationsDo) Distinct(cols ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationsDo) Omit(cols ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationsDo) Join(table schema.Tabler, on ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationsDo) RightJoin(table schema.Tabler, on ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationsDo) Group(cols ...field.Expr) *notificationsDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationsDo) Having(conds ...gen.Condition) *notificationsDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationsDo) Limit(limit int) *notificationsDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationsDo) Offset(offset int) *notificationsDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *notificationsDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationsDo) Unscoped() *notificationsDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationsDo) Create(values ...*model.Notifications) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationsDo) CreateInBatches(values []*model.Notifications, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationsDo) Save(values ...*model.Notifications) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationsDo) First() (*model.Notifications, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Notifications), nil
	}
}

func (n notificationsDo) Take() (*model.Notifications, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Notifications), nil
	}
}

func (n notificationsDo) Last() (*model.Notifications, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Notifications), nil
	}
}

func (n notificationsDo) Find() ([]*model.Notifications, error) {
	result, err := n.DO.Find()
	return result.([]*model.Notifications), err
}

func (n notificationsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Notifications, err error) {
	buf := make([]*model.Notifications, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationsDo) FindInBatches(result *[]*model.Notifications, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationsDo) Attrs(attrs ...field.AssignExpr) *notificationsDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationsDo) Assign(attrs ...field.AssignExpr) *notificationsDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationsDo) Joins(fields ...field.RelationField) *notificationsDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationsDo) Preload(fields ...field.RelationField) *notificationsDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationsDo) FirstOrInit() (*model.Notifications, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Notifications), nil
	}
}

func (n notificationsDo) FirstOrCreate() (*model.Notifications, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Notifications), nil
	}
}

func (n notificationsDo) FindByPage(offset int, limit int) (result []*model.Notifications, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationsDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationsDo) Delete(models ...*model.Notifications) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationsDo) withDO(do gen.Dao) *notificationsDo {
	n.DO = *do.(*gen.DO)
	return n
}
