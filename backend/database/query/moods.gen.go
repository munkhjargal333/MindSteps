// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newMoods(db *gorm.DB, opts ...gen.DOOption) moods {
	_moods := moods{}

	_moods.moodsDo.UseDB(db, opts...)
	_moods.moodsDo.UseModel(&model.Moods{})

	tableName := _moods.moodsDo.TableName()
	_moods.ALL = field.NewAsterisk(tableName)
	_moods.ID = field.NewUint(tableName, "id")
	_moods.CategoryID = field.NewUint(tableName, "category_id")
	_moods.Name = field.NewString(tableName, "name")
	_moods.Description = field.NewString(tableName, "description")
	_moods.IntensityLevel = field.NewInt(tableName, "intensity_level")
	_moods.Emoji = field.NewString(tableName, "emoji")
	_moods.CreatedAt = field.NewTime(tableName, "created_at")
	_moods.Category = moodsBelongsToCategory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Category", "model.MoodCategories"),
	}

	_moods.fillFieldMap()

	return _moods
}

type moods struct {
	moodsDo moodsDo

	ALL            field.Asterisk
	ID             field.Uint
	CategoryID     field.Uint
	Name           field.String
	Description    field.String
	IntensityLevel field.Int
	Emoji          field.String
	CreatedAt      field.Time
	Category       moodsBelongsToCategory

	fieldMap map[string]field.Expr
}

func (m moods) Table(newTableName string) *moods {
	m.moodsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m moods) As(alias string) *moods {
	m.moodsDo.DO = *(m.moodsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *moods) updateTableName(table string) *moods {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CategoryID = field.NewUint(table, "category_id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.IntensityLevel = field.NewInt(table, "intensity_level")
	m.Emoji = field.NewString(table, "emoji")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *moods) WithContext(ctx context.Context) *moodsDo { return m.moodsDo.WithContext(ctx) }

func (m moods) TableName() string { return m.moodsDo.TableName() }

func (m moods) Alias() string { return m.moodsDo.Alias() }

func (m moods) Columns(cols ...field.Expr) gen.Columns { return m.moodsDo.Columns(cols...) }

func (m *moods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *moods) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["category_id"] = m.CategoryID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["intensity_level"] = m.IntensityLevel
	m.fieldMap["emoji"] = m.Emoji
	m.fieldMap["created_at"] = m.CreatedAt

}

func (m moods) clone(db *gorm.DB) moods {
	m.moodsDo.ReplaceConnPool(db.Statement.ConnPool)
	m.Category.db = db.Session(&gorm.Session{Initialized: true})
	m.Category.db.Statement.ConnPool = db.Statement.ConnPool
	return m
}

func (m moods) replaceDB(db *gorm.DB) moods {
	m.moodsDo.ReplaceDB(db)
	m.Category.db = db.Session(&gorm.Session{})
	return m
}

type moodsBelongsToCategory struct {
	db *gorm.DB

	field.RelationField
}

func (a moodsBelongsToCategory) Where(conds ...field.Expr) *moodsBelongsToCategory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a moodsBelongsToCategory) WithContext(ctx context.Context) *moodsBelongsToCategory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a moodsBelongsToCategory) Session(session *gorm.Session) *moodsBelongsToCategory {
	a.db = a.db.Session(session)
	return &a
}

func (a moodsBelongsToCategory) Model(m *model.Moods) *moodsBelongsToCategoryTx {
	return &moodsBelongsToCategoryTx{a.db.Model(m).Association(a.Name())}
}

func (a moodsBelongsToCategory) Unscoped() *moodsBelongsToCategory {
	a.db = a.db.Unscoped()
	return &a
}

type moodsBelongsToCategoryTx struct{ tx *gorm.Association }

func (a moodsBelongsToCategoryTx) Find() (result *model.MoodCategories, err error) {
	return result, a.tx.Find(&result)
}

func (a moodsBelongsToCategoryTx) Append(values ...*model.MoodCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a moodsBelongsToCategoryTx) Replace(values ...*model.MoodCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a moodsBelongsToCategoryTx) Delete(values ...*model.MoodCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a moodsBelongsToCategoryTx) Clear() error {
	return a.tx.Clear()
}

func (a moodsBelongsToCategoryTx) Count() int64 {
	return a.tx.Count()
}

func (a moodsBelongsToCategoryTx) Unscoped() *moodsBelongsToCategoryTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type moodsDo struct{ gen.DO }

func (m moodsDo) Debug() *moodsDo {
	return m.withDO(m.DO.Debug())
}

func (m moodsDo) WithContext(ctx context.Context) *moodsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moodsDo) ReadDB() *moodsDo {
	return m.Clauses(dbresolver.Read)
}

func (m moodsDo) WriteDB() *moodsDo {
	return m.Clauses(dbresolver.Write)
}

func (m moodsDo) Session(config *gorm.Session) *moodsDo {
	return m.withDO(m.DO.Session(config))
}

func (m moodsDo) Clauses(conds ...clause.Expression) *moodsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moodsDo) Returning(value interface{}, columns ...string) *moodsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moodsDo) Not(conds ...gen.Condition) *moodsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moodsDo) Or(conds ...gen.Condition) *moodsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moodsDo) Select(conds ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moodsDo) Where(conds ...gen.Condition) *moodsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moodsDo) Order(conds ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moodsDo) Distinct(cols ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moodsDo) Omit(cols ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moodsDo) Join(table schema.Tabler, on ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *moodsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moodsDo) RightJoin(table schema.Tabler, on ...field.Expr) *moodsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moodsDo) Group(cols ...field.Expr) *moodsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moodsDo) Having(conds ...gen.Condition) *moodsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moodsDo) Limit(limit int) *moodsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moodsDo) Offset(offset int) *moodsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *moodsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moodsDo) Unscoped() *moodsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moodsDo) Create(values ...*model.Moods) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moodsDo) CreateInBatches(values []*model.Moods, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moodsDo) Save(values ...*model.Moods) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moodsDo) First() (*model.Moods, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moods), nil
	}
}

func (m moodsDo) Take() (*model.Moods, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moods), nil
	}
}

func (m moodsDo) Last() (*model.Moods, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moods), nil
	}
}

func (m moodsDo) Find() ([]*model.Moods, error) {
	result, err := m.DO.Find()
	return result.([]*model.Moods), err
}

func (m moodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Moods, err error) {
	buf := make([]*model.Moods, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moodsDo) FindInBatches(result *[]*model.Moods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moodsDo) Attrs(attrs ...field.AssignExpr) *moodsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moodsDo) Assign(attrs ...field.AssignExpr) *moodsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moodsDo) Joins(fields ...field.RelationField) *moodsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moodsDo) Preload(fields ...field.RelationField) *moodsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moodsDo) FirstOrInit() (*model.Moods, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moods), nil
	}
}

func (m moodsDo) FirstOrCreate() (*model.Moods, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Moods), nil
	}
}

func (m moodsDo) FindByPage(offset int, limit int) (result []*model.Moods, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moodsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moodsDo) Delete(models ...*model.Moods) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moodsDo) withDO(do gen.Dao) *moodsDo {
	m.DO = *do.(*gen.DO)
	return m
}
