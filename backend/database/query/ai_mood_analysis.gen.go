// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newAIMoodAnalysis(db *gorm.DB, opts ...gen.DOOption) aIMoodAnalysis {
	_aIMoodAnalysis := aIMoodAnalysis{}

	_aIMoodAnalysis.aIMoodAnalysisDo.UseDB(db, opts...)
	_aIMoodAnalysis.aIMoodAnalysisDo.UseModel(&model.AIMoodAnalysis{})

	tableName := _aIMoodAnalysis.aIMoodAnalysisDo.TableName()
	_aIMoodAnalysis.ALL = field.NewAsterisk(tableName)
	_aIMoodAnalysis.ID = field.NewUint(tableName, "id")
	_aIMoodAnalysis.MoodEntryID = field.NewUint(tableName, "mood_entry_id")
	_aIMoodAnalysis.UserID = field.NewUint(tableName, "user_id")
	_aIMoodAnalysis.MoodConsistencyScore = field.NewInt(tableName, "mood_consistency_score")
	_aIMoodAnalysis.TriggerPatternScore = field.NewInt(tableName, "trigger_pattern_score")
	_aIMoodAnalysis.CopingEffectivenessScore = field.NewInt(tableName, "coping_effectiveness_score")
	_aIMoodAnalysis.EmotionalIntelligenceScore = field.NewInt(tableName, "emotional_intelligence_score")
	_aIMoodAnalysis.DetectedPatterns = field.NewString(tableName, "detected_patterns")
	_aIMoodAnalysis.ImprovementSuggestions = field.NewString(tableName, "improvement_suggestions")
	_aIMoodAnalysis.WarningFlags = field.NewString(tableName, "warning_flags")
	_aIMoodAnalysis.PointsEarned = field.NewInt(tableName, "points_earned")
	_aIMoodAnalysis.CreatedAt = field.NewTime(tableName, "created_at")
	_aIMoodAnalysis.MoodEntry = aIMoodAnalysisBelongsToMoodEntry{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MoodEntry", "model.MoodEntries"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("MoodEntry.User", "model.Users"),
		},
		Mood: struct {
			field.RelationField
			Category struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("MoodEntry.Mood", "model.Moods"),
			Category: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("MoodEntry.Mood.Category", "model.MoodCategories"),
			},
		},
	}

	_aIMoodAnalysis.User = aIMoodAnalysisBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_aIMoodAnalysis.fillFieldMap()

	return _aIMoodAnalysis
}

type aIMoodAnalysis struct {
	aIMoodAnalysisDo aIMoodAnalysisDo

	ALL                        field.Asterisk
	ID                         field.Uint
	MoodEntryID                field.Uint
	UserID                     field.Uint
	MoodConsistencyScore       field.Int
	TriggerPatternScore        field.Int
	CopingEffectivenessScore   field.Int
	EmotionalIntelligenceScore field.Int
	DetectedPatterns           field.String
	ImprovementSuggestions     field.String
	WarningFlags               field.String
	PointsEarned               field.Int
	CreatedAt                  field.Time
	MoodEntry                  aIMoodAnalysisBelongsToMoodEntry

	User aIMoodAnalysisBelongsToUser

	fieldMap map[string]field.Expr
}

func (a aIMoodAnalysis) Table(newTableName string) *aIMoodAnalysis {
	a.aIMoodAnalysisDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIMoodAnalysis) As(alias string) *aIMoodAnalysis {
	a.aIMoodAnalysisDo.DO = *(a.aIMoodAnalysisDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIMoodAnalysis) updateTableName(table string) *aIMoodAnalysis {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.MoodEntryID = field.NewUint(table, "mood_entry_id")
	a.UserID = field.NewUint(table, "user_id")
	a.MoodConsistencyScore = field.NewInt(table, "mood_consistency_score")
	a.TriggerPatternScore = field.NewInt(table, "trigger_pattern_score")
	a.CopingEffectivenessScore = field.NewInt(table, "coping_effectiveness_score")
	a.EmotionalIntelligenceScore = field.NewInt(table, "emotional_intelligence_score")
	a.DetectedPatterns = field.NewString(table, "detected_patterns")
	a.ImprovementSuggestions = field.NewString(table, "improvement_suggestions")
	a.WarningFlags = field.NewString(table, "warning_flags")
	a.PointsEarned = field.NewInt(table, "points_earned")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *aIMoodAnalysis) WithContext(ctx context.Context) *aIMoodAnalysisDo {
	return a.aIMoodAnalysisDo.WithContext(ctx)
}

func (a aIMoodAnalysis) TableName() string { return a.aIMoodAnalysisDo.TableName() }

func (a aIMoodAnalysis) Alias() string { return a.aIMoodAnalysisDo.Alias() }

func (a aIMoodAnalysis) Columns(cols ...field.Expr) gen.Columns {
	return a.aIMoodAnalysisDo.Columns(cols...)
}

func (a *aIMoodAnalysis) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIMoodAnalysis) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["mood_entry_id"] = a.MoodEntryID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["mood_consistency_score"] = a.MoodConsistencyScore
	a.fieldMap["trigger_pattern_score"] = a.TriggerPatternScore
	a.fieldMap["coping_effectiveness_score"] = a.CopingEffectivenessScore
	a.fieldMap["emotional_intelligence_score"] = a.EmotionalIntelligenceScore
	a.fieldMap["detected_patterns"] = a.DetectedPatterns
	a.fieldMap["improvement_suggestions"] = a.ImprovementSuggestions
	a.fieldMap["warning_flags"] = a.WarningFlags
	a.fieldMap["points_earned"] = a.PointsEarned
	a.fieldMap["created_at"] = a.CreatedAt

}

func (a aIMoodAnalysis) clone(db *gorm.DB) aIMoodAnalysis {
	a.aIMoodAnalysisDo.ReplaceConnPool(db.Statement.ConnPool)
	a.MoodEntry.db = db.Session(&gorm.Session{Initialized: true})
	a.MoodEntry.db.Statement.ConnPool = db.Statement.ConnPool
	a.User.db = db.Session(&gorm.Session{Initialized: true})
	a.User.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a aIMoodAnalysis) replaceDB(db *gorm.DB) aIMoodAnalysis {
	a.aIMoodAnalysisDo.ReplaceDB(db)
	a.MoodEntry.db = db.Session(&gorm.Session{})
	a.User.db = db.Session(&gorm.Session{})
	return a
}

type aIMoodAnalysisBelongsToMoodEntry struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
	Mood struct {
		field.RelationField
		Category struct {
			field.RelationField
		}
	}
}

func (a aIMoodAnalysisBelongsToMoodEntry) Where(conds ...field.Expr) *aIMoodAnalysisBelongsToMoodEntry {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIMoodAnalysisBelongsToMoodEntry) WithContext(ctx context.Context) *aIMoodAnalysisBelongsToMoodEntry {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIMoodAnalysisBelongsToMoodEntry) Session(session *gorm.Session) *aIMoodAnalysisBelongsToMoodEntry {
	a.db = a.db.Session(session)
	return &a
}

func (a aIMoodAnalysisBelongsToMoodEntry) Model(m *model.AIMoodAnalysis) *aIMoodAnalysisBelongsToMoodEntryTx {
	return &aIMoodAnalysisBelongsToMoodEntryTx{a.db.Model(m).Association(a.Name())}
}

func (a aIMoodAnalysisBelongsToMoodEntry) Unscoped() *aIMoodAnalysisBelongsToMoodEntry {
	a.db = a.db.Unscoped()
	return &a
}

type aIMoodAnalysisBelongsToMoodEntryTx struct{ tx *gorm.Association }

func (a aIMoodAnalysisBelongsToMoodEntryTx) Find() (result *model.MoodEntries, err error) {
	return result, a.tx.Find(&result)
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Append(values ...*model.MoodEntries) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Replace(values ...*model.MoodEntries) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Delete(values ...*model.MoodEntries) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Clear() error {
	return a.tx.Clear()
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Count() int64 {
	return a.tx.Count()
}

func (a aIMoodAnalysisBelongsToMoodEntryTx) Unscoped() *aIMoodAnalysisBelongsToMoodEntryTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aIMoodAnalysisBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a aIMoodAnalysisBelongsToUser) Where(conds ...field.Expr) *aIMoodAnalysisBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIMoodAnalysisBelongsToUser) WithContext(ctx context.Context) *aIMoodAnalysisBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIMoodAnalysisBelongsToUser) Session(session *gorm.Session) *aIMoodAnalysisBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a aIMoodAnalysisBelongsToUser) Model(m *model.AIMoodAnalysis) *aIMoodAnalysisBelongsToUserTx {
	return &aIMoodAnalysisBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a aIMoodAnalysisBelongsToUser) Unscoped() *aIMoodAnalysisBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type aIMoodAnalysisBelongsToUserTx struct{ tx *gorm.Association }

func (a aIMoodAnalysisBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a aIMoodAnalysisBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIMoodAnalysisBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIMoodAnalysisBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIMoodAnalysisBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a aIMoodAnalysisBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a aIMoodAnalysisBelongsToUserTx) Unscoped() *aIMoodAnalysisBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aIMoodAnalysisDo struct{ gen.DO }

func (a aIMoodAnalysisDo) Debug() *aIMoodAnalysisDo {
	return a.withDO(a.DO.Debug())
}

func (a aIMoodAnalysisDo) WithContext(ctx context.Context) *aIMoodAnalysisDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIMoodAnalysisDo) ReadDB() *aIMoodAnalysisDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIMoodAnalysisDo) WriteDB() *aIMoodAnalysisDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIMoodAnalysisDo) Session(config *gorm.Session) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIMoodAnalysisDo) Clauses(conds ...clause.Expression) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIMoodAnalysisDo) Returning(value interface{}, columns ...string) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIMoodAnalysisDo) Not(conds ...gen.Condition) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIMoodAnalysisDo) Or(conds ...gen.Condition) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIMoodAnalysisDo) Select(conds ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIMoodAnalysisDo) Where(conds ...gen.Condition) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIMoodAnalysisDo) Order(conds ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIMoodAnalysisDo) Distinct(cols ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIMoodAnalysisDo) Omit(cols ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIMoodAnalysisDo) Join(table schema.Tabler, on ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIMoodAnalysisDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIMoodAnalysisDo) RightJoin(table schema.Tabler, on ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIMoodAnalysisDo) Group(cols ...field.Expr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIMoodAnalysisDo) Having(conds ...gen.Condition) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIMoodAnalysisDo) Limit(limit int) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIMoodAnalysisDo) Offset(offset int) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIMoodAnalysisDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIMoodAnalysisDo) Unscoped() *aIMoodAnalysisDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIMoodAnalysisDo) Create(values ...*model.AIMoodAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIMoodAnalysisDo) CreateInBatches(values []*model.AIMoodAnalysis, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIMoodAnalysisDo) Save(values ...*model.AIMoodAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIMoodAnalysisDo) First() (*model.AIMoodAnalysis, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIMoodAnalysis), nil
	}
}

func (a aIMoodAnalysisDo) Take() (*model.AIMoodAnalysis, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIMoodAnalysis), nil
	}
}

func (a aIMoodAnalysisDo) Last() (*model.AIMoodAnalysis, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIMoodAnalysis), nil
	}
}

func (a aIMoodAnalysisDo) Find() ([]*model.AIMoodAnalysis, error) {
	result, err := a.DO.Find()
	return result.([]*model.AIMoodAnalysis), err
}

func (a aIMoodAnalysisDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIMoodAnalysis, err error) {
	buf := make([]*model.AIMoodAnalysis, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIMoodAnalysisDo) FindInBatches(result *[]*model.AIMoodAnalysis, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIMoodAnalysisDo) Attrs(attrs ...field.AssignExpr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIMoodAnalysisDo) Assign(attrs ...field.AssignExpr) *aIMoodAnalysisDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIMoodAnalysisDo) Joins(fields ...field.RelationField) *aIMoodAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIMoodAnalysisDo) Preload(fields ...field.RelationField) *aIMoodAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIMoodAnalysisDo) FirstOrInit() (*model.AIMoodAnalysis, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIMoodAnalysis), nil
	}
}

func (a aIMoodAnalysisDo) FirstOrCreate() (*model.AIMoodAnalysis, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIMoodAnalysis), nil
	}
}

func (a aIMoodAnalysisDo) FindByPage(offset int, limit int) (result []*model.AIMoodAnalysis, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIMoodAnalysisDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIMoodAnalysisDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIMoodAnalysisDo) Delete(models ...*model.AIMoodAnalysis) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIMoodAnalysisDo) withDO(do gen.Dao) *aIMoodAnalysisDo {
	a.DO = *do.(*gen.DO)
	return a
}
