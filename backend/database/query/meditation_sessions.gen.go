// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newMeditationSessions(db *gorm.DB, opts ...gen.DOOption) meditationSessions {
	_meditationSessions := meditationSessions{}

	_meditationSessions.meditationSessionsDo.UseDB(db, opts...)
	_meditationSessions.meditationSessionsDo.UseModel(&model.MeditationSessions{})

	tableName := _meditationSessions.meditationSessionsDo.TableName()
	_meditationSessions.ALL = field.NewAsterisk(tableName)
	_meditationSessions.ID = field.NewUint(tableName, "id")
	_meditationSessions.UserID = field.NewUint(tableName, "user_id")
	_meditationSessions.TechniqueID = field.NewUint(tableName, "technique_id")
	_meditationSessions.SessionDate = field.NewTime(tableName, "session_date")
	_meditationSessions.StartTime = field.NewTime(tableName, "start_time")
	_meditationSessions.DurationPlanned = field.NewInt(tableName, "duration_planned")
	_meditationSessions.DurationActual = field.NewInt(tableName, "duration_actual")
	_meditationSessions.QualityRating = field.NewInt(tableName, "quality_rating")
	_meditationSessions.MoodBefore = field.NewString(tableName, "mood_before")
	_meditationSessions.MoodAfter = field.NewString(tableName, "mood_after")
	_meditationSessions.Notes = field.NewString(tableName, "notes")
	_meditationSessions.Interruptions = field.NewInt(tableName, "interruptions")
	_meditationSessions.Environment = field.NewString(tableName, "environment")
	_meditationSessions.CreatedAt = field.NewTime(tableName, "created_at")
	_meditationSessions.User = meditationSessionsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_meditationSessions.Technique = meditationSessionsBelongsToTechnique{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Technique", "model.MeditationTechniques"),
	}

	_meditationSessions.fillFieldMap()

	return _meditationSessions
}

type meditationSessions struct {
	meditationSessionsDo meditationSessionsDo

	ALL             field.Asterisk
	ID              field.Uint
	UserID          field.Uint
	TechniqueID     field.Uint
	SessionDate     field.Time
	StartTime       field.Time
	DurationPlanned field.Int
	DurationActual  field.Int
	QualityRating   field.Int
	MoodBefore      field.String
	MoodAfter       field.String
	Notes           field.String
	Interruptions   field.Int
	Environment     field.String
	CreatedAt       field.Time
	User            meditationSessionsBelongsToUser

	Technique meditationSessionsBelongsToTechnique

	fieldMap map[string]field.Expr
}

func (m meditationSessions) Table(newTableName string) *meditationSessions {
	m.meditationSessionsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m meditationSessions) As(alias string) *meditationSessions {
	m.meditationSessionsDo.DO = *(m.meditationSessionsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *meditationSessions) updateTableName(table string) *meditationSessions {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.UserID = field.NewUint(table, "user_id")
	m.TechniqueID = field.NewUint(table, "technique_id")
	m.SessionDate = field.NewTime(table, "session_date")
	m.StartTime = field.NewTime(table, "start_time")
	m.DurationPlanned = field.NewInt(table, "duration_planned")
	m.DurationActual = field.NewInt(table, "duration_actual")
	m.QualityRating = field.NewInt(table, "quality_rating")
	m.MoodBefore = field.NewString(table, "mood_before")
	m.MoodAfter = field.NewString(table, "mood_after")
	m.Notes = field.NewString(table, "notes")
	m.Interruptions = field.NewInt(table, "interruptions")
	m.Environment = field.NewString(table, "environment")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *meditationSessions) WithContext(ctx context.Context) *meditationSessionsDo {
	return m.meditationSessionsDo.WithContext(ctx)
}

func (m meditationSessions) TableName() string { return m.meditationSessionsDo.TableName() }

func (m meditationSessions) Alias() string { return m.meditationSessionsDo.Alias() }

func (m meditationSessions) Columns(cols ...field.Expr) gen.Columns {
	return m.meditationSessionsDo.Columns(cols...)
}

func (m *meditationSessions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *meditationSessions) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["technique_id"] = m.TechniqueID
	m.fieldMap["session_date"] = m.SessionDate
	m.fieldMap["start_time"] = m.StartTime
	m.fieldMap["duration_planned"] = m.DurationPlanned
	m.fieldMap["duration_actual"] = m.DurationActual
	m.fieldMap["quality_rating"] = m.QualityRating
	m.fieldMap["mood_before"] = m.MoodBefore
	m.fieldMap["mood_after"] = m.MoodAfter
	m.fieldMap["notes"] = m.Notes
	m.fieldMap["interruptions"] = m.Interruptions
	m.fieldMap["environment"] = m.Environment
	m.fieldMap["created_at"] = m.CreatedAt

}

func (m meditationSessions) clone(db *gorm.DB) meditationSessions {
	m.meditationSessionsDo.ReplaceConnPool(db.Statement.ConnPool)
	m.User.db = db.Session(&gorm.Session{Initialized: true})
	m.User.db.Statement.ConnPool = db.Statement.ConnPool
	m.Technique.db = db.Session(&gorm.Session{Initialized: true})
	m.Technique.db.Statement.ConnPool = db.Statement.ConnPool
	return m
}

func (m meditationSessions) replaceDB(db *gorm.DB) meditationSessions {
	m.meditationSessionsDo.ReplaceDB(db)
	m.User.db = db.Session(&gorm.Session{})
	m.Technique.db = db.Session(&gorm.Session{})
	return m
}

type meditationSessionsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a meditationSessionsBelongsToUser) Where(conds ...field.Expr) *meditationSessionsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a meditationSessionsBelongsToUser) WithContext(ctx context.Context) *meditationSessionsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a meditationSessionsBelongsToUser) Session(session *gorm.Session) *meditationSessionsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a meditationSessionsBelongsToUser) Model(m *model.MeditationSessions) *meditationSessionsBelongsToUserTx {
	return &meditationSessionsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a meditationSessionsBelongsToUser) Unscoped() *meditationSessionsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type meditationSessionsBelongsToUserTx struct{ tx *gorm.Association }

func (a meditationSessionsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a meditationSessionsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a meditationSessionsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a meditationSessionsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a meditationSessionsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a meditationSessionsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a meditationSessionsBelongsToUserTx) Unscoped() *meditationSessionsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type meditationSessionsBelongsToTechnique struct {
	db *gorm.DB

	field.RelationField
}

func (a meditationSessionsBelongsToTechnique) Where(conds ...field.Expr) *meditationSessionsBelongsToTechnique {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a meditationSessionsBelongsToTechnique) WithContext(ctx context.Context) *meditationSessionsBelongsToTechnique {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a meditationSessionsBelongsToTechnique) Session(session *gorm.Session) *meditationSessionsBelongsToTechnique {
	a.db = a.db.Session(session)
	return &a
}

func (a meditationSessionsBelongsToTechnique) Model(m *model.MeditationSessions) *meditationSessionsBelongsToTechniqueTx {
	return &meditationSessionsBelongsToTechniqueTx{a.db.Model(m).Association(a.Name())}
}

func (a meditationSessionsBelongsToTechnique) Unscoped() *meditationSessionsBelongsToTechnique {
	a.db = a.db.Unscoped()
	return &a
}

type meditationSessionsBelongsToTechniqueTx struct{ tx *gorm.Association }

func (a meditationSessionsBelongsToTechniqueTx) Find() (result *model.MeditationTechniques, err error) {
	return result, a.tx.Find(&result)
}

func (a meditationSessionsBelongsToTechniqueTx) Append(values ...*model.MeditationTechniques) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a meditationSessionsBelongsToTechniqueTx) Replace(values ...*model.MeditationTechniques) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a meditationSessionsBelongsToTechniqueTx) Delete(values ...*model.MeditationTechniques) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a meditationSessionsBelongsToTechniqueTx) Clear() error {
	return a.tx.Clear()
}

func (a meditationSessionsBelongsToTechniqueTx) Count() int64 {
	return a.tx.Count()
}

func (a meditationSessionsBelongsToTechniqueTx) Unscoped() *meditationSessionsBelongsToTechniqueTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type meditationSessionsDo struct{ gen.DO }

func (m meditationSessionsDo) Debug() *meditationSessionsDo {
	return m.withDO(m.DO.Debug())
}

func (m meditationSessionsDo) WithContext(ctx context.Context) *meditationSessionsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m meditationSessionsDo) ReadDB() *meditationSessionsDo {
	return m.Clauses(dbresolver.Read)
}

func (m meditationSessionsDo) WriteDB() *meditationSessionsDo {
	return m.Clauses(dbresolver.Write)
}

func (m meditationSessionsDo) Session(config *gorm.Session) *meditationSessionsDo {
	return m.withDO(m.DO.Session(config))
}

func (m meditationSessionsDo) Clauses(conds ...clause.Expression) *meditationSessionsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m meditationSessionsDo) Returning(value interface{}, columns ...string) *meditationSessionsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m meditationSessionsDo) Not(conds ...gen.Condition) *meditationSessionsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m meditationSessionsDo) Or(conds ...gen.Condition) *meditationSessionsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m meditationSessionsDo) Select(conds ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m meditationSessionsDo) Where(conds ...gen.Condition) *meditationSessionsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m meditationSessionsDo) Order(conds ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m meditationSessionsDo) Distinct(cols ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m meditationSessionsDo) Omit(cols ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m meditationSessionsDo) Join(table schema.Tabler, on ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m meditationSessionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m meditationSessionsDo) RightJoin(table schema.Tabler, on ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m meditationSessionsDo) Group(cols ...field.Expr) *meditationSessionsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m meditationSessionsDo) Having(conds ...gen.Condition) *meditationSessionsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m meditationSessionsDo) Limit(limit int) *meditationSessionsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m meditationSessionsDo) Offset(offset int) *meditationSessionsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m meditationSessionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *meditationSessionsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m meditationSessionsDo) Unscoped() *meditationSessionsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m meditationSessionsDo) Create(values ...*model.MeditationSessions) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m meditationSessionsDo) CreateInBatches(values []*model.MeditationSessions, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m meditationSessionsDo) Save(values ...*model.MeditationSessions) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m meditationSessionsDo) First() (*model.MeditationSessions, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationSessions), nil
	}
}

func (m meditationSessionsDo) Take() (*model.MeditationSessions, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationSessions), nil
	}
}

func (m meditationSessionsDo) Last() (*model.MeditationSessions, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationSessions), nil
	}
}

func (m meditationSessionsDo) Find() ([]*model.MeditationSessions, error) {
	result, err := m.DO.Find()
	return result.([]*model.MeditationSessions), err
}

func (m meditationSessionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MeditationSessions, err error) {
	buf := make([]*model.MeditationSessions, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m meditationSessionsDo) FindInBatches(result *[]*model.MeditationSessions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m meditationSessionsDo) Attrs(attrs ...field.AssignExpr) *meditationSessionsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m meditationSessionsDo) Assign(attrs ...field.AssignExpr) *meditationSessionsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m meditationSessionsDo) Joins(fields ...field.RelationField) *meditationSessionsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m meditationSessionsDo) Preload(fields ...field.RelationField) *meditationSessionsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m meditationSessionsDo) FirstOrInit() (*model.MeditationSessions, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationSessions), nil
	}
}

func (m meditationSessionsDo) FirstOrCreate() (*model.MeditationSessions, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeditationSessions), nil
	}
}

func (m meditationSessionsDo) FindByPage(offset int, limit int) (result []*model.MeditationSessions, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m meditationSessionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m meditationSessionsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m meditationSessionsDo) Delete(models ...*model.MeditationSessions) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *meditationSessionsDo) withDO(do gen.Dao) *meditationSessionsDo {
	m.DO = *do.(*gen.DO)
	return m
}
