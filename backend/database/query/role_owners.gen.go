// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newRoleOwners(db *gorm.DB, opts ...gen.DOOption) roleOwners {
	_roleOwners := roleOwners{}

	_roleOwners.roleOwnersDo.UseDB(db, opts...)
	_roleOwners.roleOwnersDo.UseModel(&model.RoleOwners{})

	tableName := _roleOwners.roleOwnersDo.TableName()
	_roleOwners.ALL = field.NewAsterisk(tableName)
	_roleOwners.ID = field.NewUint(tableName, "id")
	_roleOwners.RoleID = field.NewUint(tableName, "role_id")
	_roleOwners.OwnerID = field.NewUint(tableName, "owner_id")
	_roleOwners.CreatedByID = field.NewUint(tableName, "created_by_id")
	_roleOwners.CreatedAt = field.NewTime(tableName, "created_at")
	_roleOwners.Status = field.NewString(tableName, "status")
	_roleOwners.Role = roleOwnersHasOneRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "model.Roles"),
	}

	_roleOwners.User = roleOwnersHasOneUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_roleOwners.fillFieldMap()

	return _roleOwners
}

type roleOwners struct {
	roleOwnersDo roleOwnersDo

	ALL         field.Asterisk
	ID          field.Uint
	RoleID      field.Uint
	OwnerID     field.Uint
	CreatedByID field.Uint
	CreatedAt   field.Time
	Status      field.String
	Role        roleOwnersHasOneRole

	User roleOwnersHasOneUser

	fieldMap map[string]field.Expr
}

func (r roleOwners) Table(newTableName string) *roleOwners {
	r.roleOwnersDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleOwners) As(alias string) *roleOwners {
	r.roleOwnersDo.DO = *(r.roleOwnersDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleOwners) updateTableName(table string) *roleOwners {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.RoleID = field.NewUint(table, "role_id")
	r.OwnerID = field.NewUint(table, "owner_id")
	r.CreatedByID = field.NewUint(table, "created_by_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.Status = field.NewString(table, "status")

	r.fillFieldMap()

	return r
}

func (r *roleOwners) WithContext(ctx context.Context) *roleOwnersDo {
	return r.roleOwnersDo.WithContext(ctx)
}

func (r roleOwners) TableName() string { return r.roleOwnersDo.TableName() }

func (r roleOwners) Alias() string { return r.roleOwnersDo.Alias() }

func (r roleOwners) Columns(cols ...field.Expr) gen.Columns { return r.roleOwnersDo.Columns(cols...) }

func (r *roleOwners) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleOwners) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["owner_id"] = r.OwnerID
	r.fieldMap["created_by_id"] = r.CreatedByID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["status"] = r.Status

}

func (r roleOwners) clone(db *gorm.DB) roleOwners {
	r.roleOwnersDo.ReplaceConnPool(db.Statement.ConnPool)
	r.Role.db = db.Session(&gorm.Session{Initialized: true})
	r.Role.db.Statement.ConnPool = db.Statement.ConnPool
	r.User.db = db.Session(&gorm.Session{Initialized: true})
	r.User.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r roleOwners) replaceDB(db *gorm.DB) roleOwners {
	r.roleOwnersDo.ReplaceDB(db)
	r.Role.db = db.Session(&gorm.Session{})
	r.User.db = db.Session(&gorm.Session{})
	return r
}

type roleOwnersHasOneRole struct {
	db *gorm.DB

	field.RelationField
}

func (a roleOwnersHasOneRole) Where(conds ...field.Expr) *roleOwnersHasOneRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleOwnersHasOneRole) WithContext(ctx context.Context) *roleOwnersHasOneRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleOwnersHasOneRole) Session(session *gorm.Session) *roleOwnersHasOneRole {
	a.db = a.db.Session(session)
	return &a
}

func (a roleOwnersHasOneRole) Model(m *model.RoleOwners) *roleOwnersHasOneRoleTx {
	return &roleOwnersHasOneRoleTx{a.db.Model(m).Association(a.Name())}
}

func (a roleOwnersHasOneRole) Unscoped() *roleOwnersHasOneRole {
	a.db = a.db.Unscoped()
	return &a
}

type roleOwnersHasOneRoleTx struct{ tx *gorm.Association }

func (a roleOwnersHasOneRoleTx) Find() (result *model.Roles, err error) {
	return result, a.tx.Find(&result)
}

func (a roleOwnersHasOneRoleTx) Append(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleOwnersHasOneRoleTx) Replace(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleOwnersHasOneRoleTx) Delete(values ...*model.Roles) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleOwnersHasOneRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a roleOwnersHasOneRoleTx) Count() int64 {
	return a.tx.Count()
}

func (a roleOwnersHasOneRoleTx) Unscoped() *roleOwnersHasOneRoleTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roleOwnersHasOneUser struct {
	db *gorm.DB

	field.RelationField
}

func (a roleOwnersHasOneUser) Where(conds ...field.Expr) *roleOwnersHasOneUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleOwnersHasOneUser) WithContext(ctx context.Context) *roleOwnersHasOneUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleOwnersHasOneUser) Session(session *gorm.Session) *roleOwnersHasOneUser {
	a.db = a.db.Session(session)
	return &a
}

func (a roleOwnersHasOneUser) Model(m *model.RoleOwners) *roleOwnersHasOneUserTx {
	return &roleOwnersHasOneUserTx{a.db.Model(m).Association(a.Name())}
}

func (a roleOwnersHasOneUser) Unscoped() *roleOwnersHasOneUser {
	a.db = a.db.Unscoped()
	return &a
}

type roleOwnersHasOneUserTx struct{ tx *gorm.Association }

func (a roleOwnersHasOneUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a roleOwnersHasOneUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleOwnersHasOneUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleOwnersHasOneUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleOwnersHasOneUserTx) Clear() error {
	return a.tx.Clear()
}

func (a roleOwnersHasOneUserTx) Count() int64 {
	return a.tx.Count()
}

func (a roleOwnersHasOneUserTx) Unscoped() *roleOwnersHasOneUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roleOwnersDo struct{ gen.DO }

func (r roleOwnersDo) Debug() *roleOwnersDo {
	return r.withDO(r.DO.Debug())
}

func (r roleOwnersDo) WithContext(ctx context.Context) *roleOwnersDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleOwnersDo) ReadDB() *roleOwnersDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleOwnersDo) WriteDB() *roleOwnersDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleOwnersDo) Session(config *gorm.Session) *roleOwnersDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleOwnersDo) Clauses(conds ...clause.Expression) *roleOwnersDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleOwnersDo) Returning(value interface{}, columns ...string) *roleOwnersDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleOwnersDo) Not(conds ...gen.Condition) *roleOwnersDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleOwnersDo) Or(conds ...gen.Condition) *roleOwnersDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleOwnersDo) Select(conds ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleOwnersDo) Where(conds ...gen.Condition) *roleOwnersDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleOwnersDo) Order(conds ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleOwnersDo) Distinct(cols ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleOwnersDo) Omit(cols ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleOwnersDo) Join(table schema.Tabler, on ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleOwnersDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleOwnersDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleOwnersDo) Group(cols ...field.Expr) *roleOwnersDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleOwnersDo) Having(conds ...gen.Condition) *roleOwnersDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleOwnersDo) Limit(limit int) *roleOwnersDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleOwnersDo) Offset(offset int) *roleOwnersDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleOwnersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleOwnersDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleOwnersDo) Unscoped() *roleOwnersDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleOwnersDo) Create(values ...*model.RoleOwners) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleOwnersDo) CreateInBatches(values []*model.RoleOwners, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleOwnersDo) Save(values ...*model.RoleOwners) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleOwnersDo) First() (*model.RoleOwners, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOwners), nil
	}
}

func (r roleOwnersDo) Take() (*model.RoleOwners, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOwners), nil
	}
}

func (r roleOwnersDo) Last() (*model.RoleOwners, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOwners), nil
	}
}

func (r roleOwnersDo) Find() ([]*model.RoleOwners, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleOwners), err
}

func (r roleOwnersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleOwners, err error) {
	buf := make([]*model.RoleOwners, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleOwnersDo) FindInBatches(result *[]*model.RoleOwners, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleOwnersDo) Attrs(attrs ...field.AssignExpr) *roleOwnersDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleOwnersDo) Assign(attrs ...field.AssignExpr) *roleOwnersDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleOwnersDo) Joins(fields ...field.RelationField) *roleOwnersDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleOwnersDo) Preload(fields ...field.RelationField) *roleOwnersDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleOwnersDo) FirstOrInit() (*model.RoleOwners, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOwners), nil
	}
}

func (r roleOwnersDo) FirstOrCreate() (*model.RoleOwners, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleOwners), nil
	}
}

func (r roleOwnersDo) FindByPage(offset int, limit int) (result []*model.RoleOwners, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleOwnersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleOwnersDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleOwnersDo) Delete(models ...*model.RoleOwners) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleOwnersDo) withDO(do gen.Dao) *roleOwnersDo {
	r.DO = *do.(*gen.DO)
	return r
}
