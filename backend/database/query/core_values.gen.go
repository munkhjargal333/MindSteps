// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newCoreValues(db *gorm.DB, opts ...gen.DOOption) coreValues {
	_coreValues := coreValues{}

	_coreValues.coreValuesDo.UseDB(db, opts...)
	_coreValues.coreValuesDo.UseModel(&model.CoreValues{})

	tableName := _coreValues.coreValuesDo.TableName()
	_coreValues.ALL = field.NewAsterisk(tableName)
	_coreValues.ID = field.NewUint(tableName, "id")
	_coreValues.UserID = field.NewUint(tableName, "user_id")
	_coreValues.Name = field.NewString(tableName, "name")
	_coreValues.Description = field.NewString(tableName, "description")
	_coreValues.PriorityOrder = field.NewInt(tableName, "priority_order")
	_coreValues.Color = field.NewString(tableName, "color")
	_coreValues.IsActive = field.NewBool(tableName, "is_active")
	_coreValues.CreatedAt = field.NewTime(tableName, "created_at")
	_coreValues.UpdatedAt = field.NewTime(tableName, "updated_at")
	_coreValues.User = coreValuesBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_coreValues.fillFieldMap()

	return _coreValues
}

type coreValues struct {
	coreValuesDo coreValuesDo

	ALL           field.Asterisk
	ID            field.Uint
	UserID        field.Uint
	Name          field.String
	Description   field.String
	PriorityOrder field.Int
	Color         field.String
	IsActive      field.Bool
	CreatedAt     field.Time
	UpdatedAt     field.Time
	User          coreValuesBelongsToUser

	fieldMap map[string]field.Expr
}

func (c coreValues) Table(newTableName string) *coreValues {
	c.coreValuesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coreValues) As(alias string) *coreValues {
	c.coreValuesDo.DO = *(c.coreValuesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coreValues) updateTableName(table string) *coreValues {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.UserID = field.NewUint(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.PriorityOrder = field.NewInt(table, "priority_order")
	c.Color = field.NewString(table, "color")
	c.IsActive = field.NewBool(table, "is_active")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *coreValues) WithContext(ctx context.Context) *coreValuesDo {
	return c.coreValuesDo.WithContext(ctx)
}

func (c coreValues) TableName() string { return c.coreValuesDo.TableName() }

func (c coreValues) Alias() string { return c.coreValuesDo.Alias() }

func (c coreValues) Columns(cols ...field.Expr) gen.Columns { return c.coreValuesDo.Columns(cols...) }

func (c *coreValues) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coreValues) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["priority_order"] = c.PriorityOrder
	c.fieldMap["color"] = c.Color
	c.fieldMap["is_active"] = c.IsActive
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt

}

func (c coreValues) clone(db *gorm.DB) coreValues {
	c.coreValuesDo.ReplaceConnPool(db.Statement.ConnPool)
	c.User.db = db.Session(&gorm.Session{Initialized: true})
	c.User.db.Statement.ConnPool = db.Statement.ConnPool
	return c
}

func (c coreValues) replaceDB(db *gorm.DB) coreValues {
	c.coreValuesDo.ReplaceDB(db)
	c.User.db = db.Session(&gorm.Session{})
	return c
}

type coreValuesBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a coreValuesBelongsToUser) Where(conds ...field.Expr) *coreValuesBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a coreValuesBelongsToUser) WithContext(ctx context.Context) *coreValuesBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a coreValuesBelongsToUser) Session(session *gorm.Session) *coreValuesBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a coreValuesBelongsToUser) Model(m *model.CoreValues) *coreValuesBelongsToUserTx {
	return &coreValuesBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a coreValuesBelongsToUser) Unscoped() *coreValuesBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type coreValuesBelongsToUserTx struct{ tx *gorm.Association }

func (a coreValuesBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a coreValuesBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a coreValuesBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a coreValuesBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a coreValuesBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a coreValuesBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a coreValuesBelongsToUserTx) Unscoped() *coreValuesBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type coreValuesDo struct{ gen.DO }

func (c coreValuesDo) Debug() *coreValuesDo {
	return c.withDO(c.DO.Debug())
}

func (c coreValuesDo) WithContext(ctx context.Context) *coreValuesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coreValuesDo) ReadDB() *coreValuesDo {
	return c.Clauses(dbresolver.Read)
}

func (c coreValuesDo) WriteDB() *coreValuesDo {
	return c.Clauses(dbresolver.Write)
}

func (c coreValuesDo) Session(config *gorm.Session) *coreValuesDo {
	return c.withDO(c.DO.Session(config))
}

func (c coreValuesDo) Clauses(conds ...clause.Expression) *coreValuesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coreValuesDo) Returning(value interface{}, columns ...string) *coreValuesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coreValuesDo) Not(conds ...gen.Condition) *coreValuesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coreValuesDo) Or(conds ...gen.Condition) *coreValuesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coreValuesDo) Select(conds ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coreValuesDo) Where(conds ...gen.Condition) *coreValuesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coreValuesDo) Order(conds ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coreValuesDo) Distinct(cols ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coreValuesDo) Omit(cols ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coreValuesDo) Join(table schema.Tabler, on ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coreValuesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coreValuesDo) RightJoin(table schema.Tabler, on ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coreValuesDo) Group(cols ...field.Expr) *coreValuesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coreValuesDo) Having(conds ...gen.Condition) *coreValuesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coreValuesDo) Limit(limit int) *coreValuesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coreValuesDo) Offset(offset int) *coreValuesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coreValuesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *coreValuesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coreValuesDo) Unscoped() *coreValuesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c coreValuesDo) Create(values ...*model.CoreValues) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coreValuesDo) CreateInBatches(values []*model.CoreValues, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coreValuesDo) Save(values ...*model.CoreValues) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coreValuesDo) First() (*model.CoreValues, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoreValues), nil
	}
}

func (c coreValuesDo) Take() (*model.CoreValues, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoreValues), nil
	}
}

func (c coreValuesDo) Last() (*model.CoreValues, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoreValues), nil
	}
}

func (c coreValuesDo) Find() ([]*model.CoreValues, error) {
	result, err := c.DO.Find()
	return result.([]*model.CoreValues), err
}

func (c coreValuesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CoreValues, err error) {
	buf := make([]*model.CoreValues, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coreValuesDo) FindInBatches(result *[]*model.CoreValues, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coreValuesDo) Attrs(attrs ...field.AssignExpr) *coreValuesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coreValuesDo) Assign(attrs ...field.AssignExpr) *coreValuesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coreValuesDo) Joins(fields ...field.RelationField) *coreValuesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coreValuesDo) Preload(fields ...field.RelationField) *coreValuesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coreValuesDo) FirstOrInit() (*model.CoreValues, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoreValues), nil
	}
}

func (c coreValuesDo) FirstOrCreate() (*model.CoreValues, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoreValues), nil
	}
}

func (c coreValuesDo) FindByPage(offset int, limit int) (result []*model.CoreValues, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coreValuesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coreValuesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coreValuesDo) Delete(models ...*model.CoreValues) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coreValuesDo) withDO(do gen.Dao) *coreValuesDo {
	c.DO = *do.(*gen.DO)
	return c
}
