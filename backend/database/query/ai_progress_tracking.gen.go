// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newAIProgressTracking(db *gorm.DB, opts ...gen.DOOption) aIProgressTracking {
	_aIProgressTracking := aIProgressTracking{}

	_aIProgressTracking.aIProgressTrackingDo.UseDB(db, opts...)
	_aIProgressTracking.aIProgressTrackingDo.UseModel(&model.AIProgressTracking{})

	tableName := _aIProgressTracking.aIProgressTrackingDo.TableName()
	_aIProgressTracking.ALL = field.NewAsterisk(tableName)
	_aIProgressTracking.ID = field.NewUint(tableName, "id")
	_aIProgressTracking.UserID = field.NewUint(tableName, "user_id")
	_aIProgressTracking.AnalysisPeriod = field.NewString(tableName, "analysis_period")
	_aIProgressTracking.PeriodStart = field.NewTime(tableName, "period_start")
	_aIProgressTracking.PeriodEnd = field.NewTime(tableName, "period_end")
	_aIProgressTracking.JournalConsistencyScore = field.NewInt(tableName, "journal_consistency_score")
	_aIProgressTracking.MoodStabilityTrend = field.NewFloat64(tableName, "mood_stability_trend")
	_aIProgressTracking.GoalProgressRate = field.NewFloat64(tableName, "goal_progress_rate")
	_aIProgressTracking.MeditationRegularityScore = field.NewInt(tableName, "meditation_regularity_score")
	_aIProgressTracking.OverallWellbeingTrend = field.NewFloat64(tableName, "overall_wellbeing_trend")
	_aIProgressTracking.KeyImprovements = field.NewString(tableName, "key_improvements")
	_aIProgressTracking.AreasNeedingAttention = field.NewString(tableName, "areas_needing_attention")
	_aIProgressTracking.BehavioralChangesDetected = field.NewString(tableName, "behavioral_changes_detected")
	_aIProgressTracking.RecommendedFocusAreas = field.NewString(tableName, "recommended_focus_areas")
	_aIProgressTracking.PeriodTotalPoints = field.NewInt(tableName, "period_total_points")
	_aIProgressTracking.ImprovementBonusPoints = field.NewInt(tableName, "improvement_bonus_points")
	_aIProgressTracking.ConsistencyBonusPoints = field.NewInt(tableName, "consistency_bonus_points")
	_aIProgressTracking.GeneratedAt = field.NewTime(tableName, "generated_at")
	_aIProgressTracking.User = aIProgressTrackingBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_aIProgressTracking.fillFieldMap()

	return _aIProgressTracking
}

type aIProgressTracking struct {
	aIProgressTrackingDo aIProgressTrackingDo

	ALL                       field.Asterisk
	ID                        field.Uint
	UserID                    field.Uint
	AnalysisPeriod            field.String
	PeriodStart               field.Time
	PeriodEnd                 field.Time
	JournalConsistencyScore   field.Int
	MoodStabilityTrend        field.Float64
	GoalProgressRate          field.Float64
	MeditationRegularityScore field.Int
	OverallWellbeingTrend     field.Float64
	KeyImprovements           field.String
	AreasNeedingAttention     field.String
	BehavioralChangesDetected field.String
	RecommendedFocusAreas     field.String
	PeriodTotalPoints         field.Int
	ImprovementBonusPoints    field.Int
	ConsistencyBonusPoints    field.Int
	GeneratedAt               field.Time
	User                      aIProgressTrackingBelongsToUser

	fieldMap map[string]field.Expr
}

func (a aIProgressTracking) Table(newTableName string) *aIProgressTracking {
	a.aIProgressTrackingDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIProgressTracking) As(alias string) *aIProgressTracking {
	a.aIProgressTrackingDo.DO = *(a.aIProgressTrackingDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIProgressTracking) updateTableName(table string) *aIProgressTracking {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.UserID = field.NewUint(table, "user_id")
	a.AnalysisPeriod = field.NewString(table, "analysis_period")
	a.PeriodStart = field.NewTime(table, "period_start")
	a.PeriodEnd = field.NewTime(table, "period_end")
	a.JournalConsistencyScore = field.NewInt(table, "journal_consistency_score")
	a.MoodStabilityTrend = field.NewFloat64(table, "mood_stability_trend")
	a.GoalProgressRate = field.NewFloat64(table, "goal_progress_rate")
	a.MeditationRegularityScore = field.NewInt(table, "meditation_regularity_score")
	a.OverallWellbeingTrend = field.NewFloat64(table, "overall_wellbeing_trend")
	a.KeyImprovements = field.NewString(table, "key_improvements")
	a.AreasNeedingAttention = field.NewString(table, "areas_needing_attention")
	a.BehavioralChangesDetected = field.NewString(table, "behavioral_changes_detected")
	a.RecommendedFocusAreas = field.NewString(table, "recommended_focus_areas")
	a.PeriodTotalPoints = field.NewInt(table, "period_total_points")
	a.ImprovementBonusPoints = field.NewInt(table, "improvement_bonus_points")
	a.ConsistencyBonusPoints = field.NewInt(table, "consistency_bonus_points")
	a.GeneratedAt = field.NewTime(table, "generated_at")

	a.fillFieldMap()

	return a
}

func (a *aIProgressTracking) WithContext(ctx context.Context) *aIProgressTrackingDo {
	return a.aIProgressTrackingDo.WithContext(ctx)
}

func (a aIProgressTracking) TableName() string { return a.aIProgressTrackingDo.TableName() }

func (a aIProgressTracking) Alias() string { return a.aIProgressTrackingDo.Alias() }

func (a aIProgressTracking) Columns(cols ...field.Expr) gen.Columns {
	return a.aIProgressTrackingDo.Columns(cols...)
}

func (a *aIProgressTracking) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIProgressTracking) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["analysis_period"] = a.AnalysisPeriod
	a.fieldMap["period_start"] = a.PeriodStart
	a.fieldMap["period_end"] = a.PeriodEnd
	a.fieldMap["journal_consistency_score"] = a.JournalConsistencyScore
	a.fieldMap["mood_stability_trend"] = a.MoodStabilityTrend
	a.fieldMap["goal_progress_rate"] = a.GoalProgressRate
	a.fieldMap["meditation_regularity_score"] = a.MeditationRegularityScore
	a.fieldMap["overall_wellbeing_trend"] = a.OverallWellbeingTrend
	a.fieldMap["key_improvements"] = a.KeyImprovements
	a.fieldMap["areas_needing_attention"] = a.AreasNeedingAttention
	a.fieldMap["behavioral_changes_detected"] = a.BehavioralChangesDetected
	a.fieldMap["recommended_focus_areas"] = a.RecommendedFocusAreas
	a.fieldMap["period_total_points"] = a.PeriodTotalPoints
	a.fieldMap["improvement_bonus_points"] = a.ImprovementBonusPoints
	a.fieldMap["consistency_bonus_points"] = a.ConsistencyBonusPoints
	a.fieldMap["generated_at"] = a.GeneratedAt

}

func (a aIProgressTracking) clone(db *gorm.DB) aIProgressTracking {
	a.aIProgressTrackingDo.ReplaceConnPool(db.Statement.ConnPool)
	a.User.db = db.Session(&gorm.Session{Initialized: true})
	a.User.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a aIProgressTracking) replaceDB(db *gorm.DB) aIProgressTracking {
	a.aIProgressTrackingDo.ReplaceDB(db)
	a.User.db = db.Session(&gorm.Session{})
	return a
}

type aIProgressTrackingBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a aIProgressTrackingBelongsToUser) Where(conds ...field.Expr) *aIProgressTrackingBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIProgressTrackingBelongsToUser) WithContext(ctx context.Context) *aIProgressTrackingBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIProgressTrackingBelongsToUser) Session(session *gorm.Session) *aIProgressTrackingBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a aIProgressTrackingBelongsToUser) Model(m *model.AIProgressTracking) *aIProgressTrackingBelongsToUserTx {
	return &aIProgressTrackingBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a aIProgressTrackingBelongsToUser) Unscoped() *aIProgressTrackingBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type aIProgressTrackingBelongsToUserTx struct{ tx *gorm.Association }

func (a aIProgressTrackingBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a aIProgressTrackingBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIProgressTrackingBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIProgressTrackingBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIProgressTrackingBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a aIProgressTrackingBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a aIProgressTrackingBelongsToUserTx) Unscoped() *aIProgressTrackingBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aIProgressTrackingDo struct{ gen.DO }

func (a aIProgressTrackingDo) Debug() *aIProgressTrackingDo {
	return a.withDO(a.DO.Debug())
}

func (a aIProgressTrackingDo) WithContext(ctx context.Context) *aIProgressTrackingDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIProgressTrackingDo) ReadDB() *aIProgressTrackingDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIProgressTrackingDo) WriteDB() *aIProgressTrackingDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIProgressTrackingDo) Session(config *gorm.Session) *aIProgressTrackingDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIProgressTrackingDo) Clauses(conds ...clause.Expression) *aIProgressTrackingDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIProgressTrackingDo) Returning(value interface{}, columns ...string) *aIProgressTrackingDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIProgressTrackingDo) Not(conds ...gen.Condition) *aIProgressTrackingDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIProgressTrackingDo) Or(conds ...gen.Condition) *aIProgressTrackingDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIProgressTrackingDo) Select(conds ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIProgressTrackingDo) Where(conds ...gen.Condition) *aIProgressTrackingDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIProgressTrackingDo) Order(conds ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIProgressTrackingDo) Distinct(cols ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIProgressTrackingDo) Omit(cols ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIProgressTrackingDo) Join(table schema.Tabler, on ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIProgressTrackingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIProgressTrackingDo) RightJoin(table schema.Tabler, on ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIProgressTrackingDo) Group(cols ...field.Expr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIProgressTrackingDo) Having(conds ...gen.Condition) *aIProgressTrackingDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIProgressTrackingDo) Limit(limit int) *aIProgressTrackingDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIProgressTrackingDo) Offset(offset int) *aIProgressTrackingDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIProgressTrackingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aIProgressTrackingDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIProgressTrackingDo) Unscoped() *aIProgressTrackingDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIProgressTrackingDo) Create(values ...*model.AIProgressTracking) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIProgressTrackingDo) CreateInBatches(values []*model.AIProgressTracking, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIProgressTrackingDo) Save(values ...*model.AIProgressTracking) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIProgressTrackingDo) First() (*model.AIProgressTracking, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIProgressTracking), nil
	}
}

func (a aIProgressTrackingDo) Take() (*model.AIProgressTracking, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIProgressTracking), nil
	}
}

func (a aIProgressTrackingDo) Last() (*model.AIProgressTracking, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIProgressTracking), nil
	}
}

func (a aIProgressTrackingDo) Find() ([]*model.AIProgressTracking, error) {
	result, err := a.DO.Find()
	return result.([]*model.AIProgressTracking), err
}

func (a aIProgressTrackingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIProgressTracking, err error) {
	buf := make([]*model.AIProgressTracking, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIProgressTrackingDo) FindInBatches(result *[]*model.AIProgressTracking, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIProgressTrackingDo) Attrs(attrs ...field.AssignExpr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIProgressTrackingDo) Assign(attrs ...field.AssignExpr) *aIProgressTrackingDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIProgressTrackingDo) Joins(fields ...field.RelationField) *aIProgressTrackingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIProgressTrackingDo) Preload(fields ...field.RelationField) *aIProgressTrackingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIProgressTrackingDo) FirstOrInit() (*model.AIProgressTracking, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIProgressTracking), nil
	}
}

func (a aIProgressTrackingDo) FirstOrCreate() (*model.AIProgressTracking, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIProgressTracking), nil
	}
}

func (a aIProgressTrackingDo) FindByPage(offset int, limit int) (result []*model.AIProgressTracking, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIProgressTrackingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIProgressTrackingDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIProgressTrackingDo) Delete(models ...*model.AIProgressTracking) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIProgressTrackingDo) withDO(do gen.Dao) *aIProgressTrackingDo {
	a.DO = *do.(*gen.DO)
	return a
}
