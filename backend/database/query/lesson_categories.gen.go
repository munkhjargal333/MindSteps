// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newLessonCategories(db *gorm.DB, opts ...gen.DOOption) lessonCategories {
	_lessonCategories := lessonCategories{}

	_lessonCategories.lessonCategoriesDo.UseDB(db, opts...)
	_lessonCategories.lessonCategoriesDo.UseModel(&model.LessonCategories{})

	tableName := _lessonCategories.lessonCategoriesDo.TableName()
	_lessonCategories.ALL = field.NewAsterisk(tableName)
	_lessonCategories.ID = field.NewUint(tableName, "id")
	_lessonCategories.Name = field.NewString(tableName, "name")
	_lessonCategories.Description = field.NewString(tableName, "description")
	_lessonCategories.Icon = field.NewString(tableName, "icon")
	_lessonCategories.Color = field.NewString(tableName, "color")
	_lessonCategories.SortOrder = field.NewInt(tableName, "sort_order")
	_lessonCategories.CreatedAt = field.NewTime(tableName, "created_at")

	_lessonCategories.fillFieldMap()

	return _lessonCategories
}

type lessonCategories struct {
	lessonCategoriesDo lessonCategoriesDo

	ALL         field.Asterisk
	ID          field.Uint
	Name        field.String
	Description field.String
	Icon        field.String
	Color       field.String
	SortOrder   field.Int
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (l lessonCategories) Table(newTableName string) *lessonCategories {
	l.lessonCategoriesDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lessonCategories) As(alias string) *lessonCategories {
	l.lessonCategoriesDo.DO = *(l.lessonCategoriesDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lessonCategories) updateTableName(table string) *lessonCategories {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.Name = field.NewString(table, "name")
	l.Description = field.NewString(table, "description")
	l.Icon = field.NewString(table, "icon")
	l.Color = field.NewString(table, "color")
	l.SortOrder = field.NewInt(table, "sort_order")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *lessonCategories) WithContext(ctx context.Context) *lessonCategoriesDo {
	return l.lessonCategoriesDo.WithContext(ctx)
}

func (l lessonCategories) TableName() string { return l.lessonCategoriesDo.TableName() }

func (l lessonCategories) Alias() string { return l.lessonCategoriesDo.Alias() }

func (l lessonCategories) Columns(cols ...field.Expr) gen.Columns {
	return l.lessonCategoriesDo.Columns(cols...)
}

func (l *lessonCategories) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lessonCategories) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["description"] = l.Description
	l.fieldMap["icon"] = l.Icon
	l.fieldMap["color"] = l.Color
	l.fieldMap["sort_order"] = l.SortOrder
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l lessonCategories) clone(db *gorm.DB) lessonCategories {
	l.lessonCategoriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lessonCategories) replaceDB(db *gorm.DB) lessonCategories {
	l.lessonCategoriesDo.ReplaceDB(db)
	return l
}

type lessonCategoriesDo struct{ gen.DO }

func (l lessonCategoriesDo) Debug() *lessonCategoriesDo {
	return l.withDO(l.DO.Debug())
}

func (l lessonCategoriesDo) WithContext(ctx context.Context) *lessonCategoriesDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lessonCategoriesDo) ReadDB() *lessonCategoriesDo {
	return l.Clauses(dbresolver.Read)
}

func (l lessonCategoriesDo) WriteDB() *lessonCategoriesDo {
	return l.Clauses(dbresolver.Write)
}

func (l lessonCategoriesDo) Session(config *gorm.Session) *lessonCategoriesDo {
	return l.withDO(l.DO.Session(config))
}

func (l lessonCategoriesDo) Clauses(conds ...clause.Expression) *lessonCategoriesDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lessonCategoriesDo) Returning(value interface{}, columns ...string) *lessonCategoriesDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lessonCategoriesDo) Not(conds ...gen.Condition) *lessonCategoriesDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lessonCategoriesDo) Or(conds ...gen.Condition) *lessonCategoriesDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lessonCategoriesDo) Select(conds ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lessonCategoriesDo) Where(conds ...gen.Condition) *lessonCategoriesDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lessonCategoriesDo) Order(conds ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lessonCategoriesDo) Distinct(cols ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lessonCategoriesDo) Omit(cols ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lessonCategoriesDo) Join(table schema.Tabler, on ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lessonCategoriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lessonCategoriesDo) RightJoin(table schema.Tabler, on ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lessonCategoriesDo) Group(cols ...field.Expr) *lessonCategoriesDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lessonCategoriesDo) Having(conds ...gen.Condition) *lessonCategoriesDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lessonCategoriesDo) Limit(limit int) *lessonCategoriesDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lessonCategoriesDo) Offset(offset int) *lessonCategoriesDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lessonCategoriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lessonCategoriesDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lessonCategoriesDo) Unscoped() *lessonCategoriesDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lessonCategoriesDo) Create(values ...*model.LessonCategories) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lessonCategoriesDo) CreateInBatches(values []*model.LessonCategories, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lessonCategoriesDo) Save(values ...*model.LessonCategories) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lessonCategoriesDo) First() (*model.LessonCategories, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonCategories), nil
	}
}

func (l lessonCategoriesDo) Take() (*model.LessonCategories, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonCategories), nil
	}
}

func (l lessonCategoriesDo) Last() (*model.LessonCategories, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonCategories), nil
	}
}

func (l lessonCategoriesDo) Find() ([]*model.LessonCategories, error) {
	result, err := l.DO.Find()
	return result.([]*model.LessonCategories), err
}

func (l lessonCategoriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LessonCategories, err error) {
	buf := make([]*model.LessonCategories, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lessonCategoriesDo) FindInBatches(result *[]*model.LessonCategories, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lessonCategoriesDo) Attrs(attrs ...field.AssignExpr) *lessonCategoriesDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lessonCategoriesDo) Assign(attrs ...field.AssignExpr) *lessonCategoriesDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lessonCategoriesDo) Joins(fields ...field.RelationField) *lessonCategoriesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lessonCategoriesDo) Preload(fields ...field.RelationField) *lessonCategoriesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lessonCategoriesDo) FirstOrInit() (*model.LessonCategories, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonCategories), nil
	}
}

func (l lessonCategoriesDo) FirstOrCreate() (*model.LessonCategories, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LessonCategories), nil
	}
}

func (l lessonCategoriesDo) FindByPage(offset int, limit int) (result []*model.LessonCategories, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lessonCategoriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lessonCategoriesDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lessonCategoriesDo) Delete(models ...*model.LessonCategories) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lessonCategoriesDo) withDO(do gen.Dao) *lessonCategoriesDo {
	l.DO = *do.(*gen.DO)
	return l
}
