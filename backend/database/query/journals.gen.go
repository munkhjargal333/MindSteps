// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newJournals(db *gorm.DB, opts ...gen.DOOption) journals {
	_journals := journals{}

	_journals.journalsDo.UseDB(db, opts...)
	_journals.journalsDo.UseModel(&model.Journals{})

	tableName := _journals.journalsDo.TableName()
	_journals.ALL = field.NewAsterisk(tableName)
	_journals.ID = field.NewUint(tableName, "id")
	_journals.UserID = field.NewUint(tableName, "user_id")
	_journals.Title = field.NewString(tableName, "title")
	_journals.EntryDate = field.NewTime(tableName, "entry_date")
	_journals.Content = field.NewString(tableName, "content")
	_journals.WordCount = field.NewInt(tableName, "word_count")
	_journals.SentimentScore = field.NewFloat64(tableName, "sentiment_score")
	_journals.IsPrivate = field.NewBool(tableName, "is_private")
	_journals.Tags = field.NewString(tableName, "tags")
	_journals.CreatedAt = field.NewTime(tableName, "created_at")
	_journals.UpdatedAt = field.NewTime(tableName, "updated_at")
	_journals.User = journalsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_journals.fillFieldMap()

	return _journals
}

type journals struct {
	journalsDo journalsDo

	ALL            field.Asterisk
	ID             field.Uint
	UserID         field.Uint
	Title          field.String
	EntryDate      field.Time
	Content        field.String
	WordCount      field.Int
	SentimentScore field.Float64
	IsPrivate      field.Bool
	Tags           field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	User           journalsBelongsToUser

	fieldMap map[string]field.Expr
}

func (j journals) Table(newTableName string) *journals {
	j.journalsDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j journals) As(alias string) *journals {
	j.journalsDo.DO = *(j.journalsDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *journals) updateTableName(table string) *journals {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewUint(table, "id")
	j.UserID = field.NewUint(table, "user_id")
	j.Title = field.NewString(table, "title")
	j.EntryDate = field.NewTime(table, "entry_date")
	j.Content = field.NewString(table, "content")
	j.WordCount = field.NewInt(table, "word_count")
	j.SentimentScore = field.NewFloat64(table, "sentiment_score")
	j.IsPrivate = field.NewBool(table, "is_private")
	j.Tags = field.NewString(table, "tags")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")

	j.fillFieldMap()

	return j
}

func (j *journals) WithContext(ctx context.Context) *journalsDo { return j.journalsDo.WithContext(ctx) }

func (j journals) TableName() string { return j.journalsDo.TableName() }

func (j journals) Alias() string { return j.journalsDo.Alias() }

func (j journals) Columns(cols ...field.Expr) gen.Columns { return j.journalsDo.Columns(cols...) }

func (j *journals) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *journals) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 12)
	j.fieldMap["id"] = j.ID
	j.fieldMap["user_id"] = j.UserID
	j.fieldMap["title"] = j.Title
	j.fieldMap["entry_date"] = j.EntryDate
	j.fieldMap["content"] = j.Content
	j.fieldMap["word_count"] = j.WordCount
	j.fieldMap["sentiment_score"] = j.SentimentScore
	j.fieldMap["is_private"] = j.IsPrivate
	j.fieldMap["tags"] = j.Tags
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt

}

func (j journals) clone(db *gorm.DB) journals {
	j.journalsDo.ReplaceConnPool(db.Statement.ConnPool)
	j.User.db = db.Session(&gorm.Session{Initialized: true})
	j.User.db.Statement.ConnPool = db.Statement.ConnPool
	return j
}

func (j journals) replaceDB(db *gorm.DB) journals {
	j.journalsDo.ReplaceDB(db)
	j.User.db = db.Session(&gorm.Session{})
	return j
}

type journalsBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a journalsBelongsToUser) Where(conds ...field.Expr) *journalsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a journalsBelongsToUser) WithContext(ctx context.Context) *journalsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a journalsBelongsToUser) Session(session *gorm.Session) *journalsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a journalsBelongsToUser) Model(m *model.Journals) *journalsBelongsToUserTx {
	return &journalsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a journalsBelongsToUser) Unscoped() *journalsBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type journalsBelongsToUserTx struct{ tx *gorm.Association }

func (a journalsBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a journalsBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a journalsBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a journalsBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a journalsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a journalsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a journalsBelongsToUserTx) Unscoped() *journalsBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type journalsDo struct{ gen.DO }

func (j journalsDo) Debug() *journalsDo {
	return j.withDO(j.DO.Debug())
}

func (j journalsDo) WithContext(ctx context.Context) *journalsDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j journalsDo) ReadDB() *journalsDo {
	return j.Clauses(dbresolver.Read)
}

func (j journalsDo) WriteDB() *journalsDo {
	return j.Clauses(dbresolver.Write)
}

func (j journalsDo) Session(config *gorm.Session) *journalsDo {
	return j.withDO(j.DO.Session(config))
}

func (j journalsDo) Clauses(conds ...clause.Expression) *journalsDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j journalsDo) Returning(value interface{}, columns ...string) *journalsDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j journalsDo) Not(conds ...gen.Condition) *journalsDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j journalsDo) Or(conds ...gen.Condition) *journalsDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j journalsDo) Select(conds ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j journalsDo) Where(conds ...gen.Condition) *journalsDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j journalsDo) Order(conds ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j journalsDo) Distinct(cols ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j journalsDo) Omit(cols ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j journalsDo) Join(table schema.Tabler, on ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j journalsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *journalsDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j journalsDo) RightJoin(table schema.Tabler, on ...field.Expr) *journalsDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j journalsDo) Group(cols ...field.Expr) *journalsDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j journalsDo) Having(conds ...gen.Condition) *journalsDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j journalsDo) Limit(limit int) *journalsDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j journalsDo) Offset(offset int) *journalsDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j journalsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *journalsDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j journalsDo) Unscoped() *journalsDo {
	return j.withDO(j.DO.Unscoped())
}

func (j journalsDo) Create(values ...*model.Journals) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j journalsDo) CreateInBatches(values []*model.Journals, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j journalsDo) Save(values ...*model.Journals) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j journalsDo) First() (*model.Journals, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Journals), nil
	}
}

func (j journalsDo) Take() (*model.Journals, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Journals), nil
	}
}

func (j journalsDo) Last() (*model.Journals, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Journals), nil
	}
}

func (j journalsDo) Find() ([]*model.Journals, error) {
	result, err := j.DO.Find()
	return result.([]*model.Journals), err
}

func (j journalsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Journals, err error) {
	buf := make([]*model.Journals, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j journalsDo) FindInBatches(result *[]*model.Journals, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j journalsDo) Attrs(attrs ...field.AssignExpr) *journalsDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j journalsDo) Assign(attrs ...field.AssignExpr) *journalsDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j journalsDo) Joins(fields ...field.RelationField) *journalsDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j journalsDo) Preload(fields ...field.RelationField) *journalsDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j journalsDo) FirstOrInit() (*model.Journals, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Journals), nil
	}
}

func (j journalsDo) FirstOrCreate() (*model.Journals, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Journals), nil
	}
}

func (j journalsDo) FindByPage(offset int, limit int) (result []*model.Journals, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j journalsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j journalsDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j journalsDo) Delete(models ...*model.Journals) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *journalsDo) withDO(do gen.Dao) *journalsDo {
	j.DO = *do.(*gen.DO)
	return j
}
