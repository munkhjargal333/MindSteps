// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newAIJournalDetailedAnalysis(db *gorm.DB, opts ...gen.DOOption) aIJournalDetailedAnalysis {
	_aIJournalDetailedAnalysis := aIJournalDetailedAnalysis{}

	_aIJournalDetailedAnalysis.aIJournalDetailedAnalysisDo.UseDB(db, opts...)
	_aIJournalDetailedAnalysis.aIJournalDetailedAnalysisDo.UseModel(&model.AIJournalDetailedAnalysis{})

	tableName := _aIJournalDetailedAnalysis.aIJournalDetailedAnalysisDo.TableName()
	_aIJournalDetailedAnalysis.ALL = field.NewAsterisk(tableName)
	_aIJournalDetailedAnalysis.ID = field.NewUint(tableName, "id")
	_aIJournalDetailedAnalysis.JournalID = field.NewUint(tableName, "journal_id")
	_aIJournalDetailedAnalysis.UserID = field.NewUint(tableName, "user_id")
	_aIJournalDetailedAnalysis.OverallSentiment = field.NewFloat64(tableName, "overall_sentiment")
	_aIJournalDetailedAnalysis.PrimaryEmotions = field.NewString(tableName, "primary_emotions")
	_aIJournalDetailedAnalysis.EmotionIntensity = field.NewFloat64(tableName, "emotion_intensity")
	_aIJournalDetailedAnalysis.EmotionalDepthScore = field.NewInt(tableName, "emotional_depth_score")
	_aIJournalDetailedAnalysis.SelfReflectionScore = field.NewInt(tableName, "self_reflection_score")
	_aIJournalDetailedAnalysis.GoalAlignmentScore = field.NewInt(tableName, "goal_alignment_score")
	_aIJournalDetailedAnalysis.GratitudeScore = field.NewInt(tableName, "gratitude_score")
	_aIJournalDetailedAnalysis.ProblemSolvingScore = field.NewInt(tableName, "problem_solving_score")
	_aIJournalDetailedAnalysis.MindfulnessScore = field.NewInt(tableName, "mindfulness_score")
	_aIJournalDetailedAnalysis.StressIndicators = field.NewString(tableName, "stress_indicators")
	_aIJournalDetailedAnalysis.PositivePatterns = field.NewString(tableName, "positive_patterns")
	_aIJournalDetailedAnalysis.ConcerningPatterns = field.NewString(tableName, "concerning_patterns")
	_aIJournalDetailedAnalysis.GrowthIndicators = field.NewString(tableName, "growth_indicators")
	_aIJournalDetailedAnalysis.PersonalizedFeedback = field.NewString(tableName, "personalized_feedback")
	_aIJournalDetailedAnalysis.SuggestedActions = field.NewString(tableName, "suggested_actions")
	_aIJournalDetailedAnalysis.RecommendedLessons = field.NewString(tableName, "recommended_lessons")
	_aIJournalDetailedAnalysis.TotalWeightedScore = field.NewFloat64(tableName, "total_weighted_score")
	_aIJournalDetailedAnalysis.BonusPoints = field.NewInt(tableName, "bonus_points")
	_aIJournalDetailedAnalysis.FinalPoints = field.NewInt(tableName, "final_points")
	_aIJournalDetailedAnalysis.AiConfidence = field.NewFloat64(tableName, "ai_confidence")
	_aIJournalDetailedAnalysis.ProcessingVersion = field.NewString(tableName, "processing_version")
	_aIJournalDetailedAnalysis.ProcessingDuration = field.NewInt(tableName, "processing_duration")
	_aIJournalDetailedAnalysis.CreatedAt = field.NewTime(tableName, "created_at")
	_aIJournalDetailedAnalysis.Journal = aIJournalDetailedAnalysisBelongsToJournal{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Journal", "model.Journals"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Journal.User", "model.Users"),
		},
	}

	_aIJournalDetailedAnalysis.User = aIJournalDetailedAnalysisBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_aIJournalDetailedAnalysis.fillFieldMap()

	return _aIJournalDetailedAnalysis
}

type aIJournalDetailedAnalysis struct {
	aIJournalDetailedAnalysisDo aIJournalDetailedAnalysisDo

	ALL                  field.Asterisk
	ID                   field.Uint
	JournalID            field.Uint
	UserID               field.Uint
	OverallSentiment     field.Float64
	PrimaryEmotions      field.String
	EmotionIntensity     field.Float64
	EmotionalDepthScore  field.Int
	SelfReflectionScore  field.Int
	GoalAlignmentScore   field.Int
	GratitudeScore       field.Int
	ProblemSolvingScore  field.Int
	MindfulnessScore     field.Int
	StressIndicators     field.String
	PositivePatterns     field.String
	ConcerningPatterns   field.String
	GrowthIndicators     field.String
	PersonalizedFeedback field.String
	SuggestedActions     field.String
	RecommendedLessons   field.String
	TotalWeightedScore   field.Float64
	BonusPoints          field.Int
	FinalPoints          field.Int
	AiConfidence         field.Float64
	ProcessingVersion    field.String
	ProcessingDuration   field.Int
	CreatedAt            field.Time
	Journal              aIJournalDetailedAnalysisBelongsToJournal

	User aIJournalDetailedAnalysisBelongsToUser

	fieldMap map[string]field.Expr
}

func (a aIJournalDetailedAnalysis) Table(newTableName string) *aIJournalDetailedAnalysis {
	a.aIJournalDetailedAnalysisDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIJournalDetailedAnalysis) As(alias string) *aIJournalDetailedAnalysis {
	a.aIJournalDetailedAnalysisDo.DO = *(a.aIJournalDetailedAnalysisDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIJournalDetailedAnalysis) updateTableName(table string) *aIJournalDetailedAnalysis {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.JournalID = field.NewUint(table, "journal_id")
	a.UserID = field.NewUint(table, "user_id")
	a.OverallSentiment = field.NewFloat64(table, "overall_sentiment")
	a.PrimaryEmotions = field.NewString(table, "primary_emotions")
	a.EmotionIntensity = field.NewFloat64(table, "emotion_intensity")
	a.EmotionalDepthScore = field.NewInt(table, "emotional_depth_score")
	a.SelfReflectionScore = field.NewInt(table, "self_reflection_score")
	a.GoalAlignmentScore = field.NewInt(table, "goal_alignment_score")
	a.GratitudeScore = field.NewInt(table, "gratitude_score")
	a.ProblemSolvingScore = field.NewInt(table, "problem_solving_score")
	a.MindfulnessScore = field.NewInt(table, "mindfulness_score")
	a.StressIndicators = field.NewString(table, "stress_indicators")
	a.PositivePatterns = field.NewString(table, "positive_patterns")
	a.ConcerningPatterns = field.NewString(table, "concerning_patterns")
	a.GrowthIndicators = field.NewString(table, "growth_indicators")
	a.PersonalizedFeedback = field.NewString(table, "personalized_feedback")
	a.SuggestedActions = field.NewString(table, "suggested_actions")
	a.RecommendedLessons = field.NewString(table, "recommended_lessons")
	a.TotalWeightedScore = field.NewFloat64(table, "total_weighted_score")
	a.BonusPoints = field.NewInt(table, "bonus_points")
	a.FinalPoints = field.NewInt(table, "final_points")
	a.AiConfidence = field.NewFloat64(table, "ai_confidence")
	a.ProcessingVersion = field.NewString(table, "processing_version")
	a.ProcessingDuration = field.NewInt(table, "processing_duration")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *aIJournalDetailedAnalysis) WithContext(ctx context.Context) *aIJournalDetailedAnalysisDo {
	return a.aIJournalDetailedAnalysisDo.WithContext(ctx)
}

func (a aIJournalDetailedAnalysis) TableName() string {
	return a.aIJournalDetailedAnalysisDo.TableName()
}

func (a aIJournalDetailedAnalysis) Alias() string { return a.aIJournalDetailedAnalysisDo.Alias() }

func (a aIJournalDetailedAnalysis) Columns(cols ...field.Expr) gen.Columns {
	return a.aIJournalDetailedAnalysisDo.Columns(cols...)
}

func (a *aIJournalDetailedAnalysis) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIJournalDetailedAnalysis) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 28)
	a.fieldMap["id"] = a.ID
	a.fieldMap["journal_id"] = a.JournalID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["overall_sentiment"] = a.OverallSentiment
	a.fieldMap["primary_emotions"] = a.PrimaryEmotions
	a.fieldMap["emotion_intensity"] = a.EmotionIntensity
	a.fieldMap["emotional_depth_score"] = a.EmotionalDepthScore
	a.fieldMap["self_reflection_score"] = a.SelfReflectionScore
	a.fieldMap["goal_alignment_score"] = a.GoalAlignmentScore
	a.fieldMap["gratitude_score"] = a.GratitudeScore
	a.fieldMap["problem_solving_score"] = a.ProblemSolvingScore
	a.fieldMap["mindfulness_score"] = a.MindfulnessScore
	a.fieldMap["stress_indicators"] = a.StressIndicators
	a.fieldMap["positive_patterns"] = a.PositivePatterns
	a.fieldMap["concerning_patterns"] = a.ConcerningPatterns
	a.fieldMap["growth_indicators"] = a.GrowthIndicators
	a.fieldMap["personalized_feedback"] = a.PersonalizedFeedback
	a.fieldMap["suggested_actions"] = a.SuggestedActions
	a.fieldMap["recommended_lessons"] = a.RecommendedLessons
	a.fieldMap["total_weighted_score"] = a.TotalWeightedScore
	a.fieldMap["bonus_points"] = a.BonusPoints
	a.fieldMap["final_points"] = a.FinalPoints
	a.fieldMap["ai_confidence"] = a.AiConfidence
	a.fieldMap["processing_version"] = a.ProcessingVersion
	a.fieldMap["processing_duration"] = a.ProcessingDuration
	a.fieldMap["created_at"] = a.CreatedAt

}

func (a aIJournalDetailedAnalysis) clone(db *gorm.DB) aIJournalDetailedAnalysis {
	a.aIJournalDetailedAnalysisDo.ReplaceConnPool(db.Statement.ConnPool)
	a.Journal.db = db.Session(&gorm.Session{Initialized: true})
	a.Journal.db.Statement.ConnPool = db.Statement.ConnPool
	a.User.db = db.Session(&gorm.Session{Initialized: true})
	a.User.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a aIJournalDetailedAnalysis) replaceDB(db *gorm.DB) aIJournalDetailedAnalysis {
	a.aIJournalDetailedAnalysisDo.ReplaceDB(db)
	a.Journal.db = db.Session(&gorm.Session{})
	a.User.db = db.Session(&gorm.Session{})
	return a
}

type aIJournalDetailedAnalysisBelongsToJournal struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
}

func (a aIJournalDetailedAnalysisBelongsToJournal) Where(conds ...field.Expr) *aIJournalDetailedAnalysisBelongsToJournal {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToJournal) WithContext(ctx context.Context) *aIJournalDetailedAnalysisBelongsToJournal {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToJournal) Session(session *gorm.Session) *aIJournalDetailedAnalysisBelongsToJournal {
	a.db = a.db.Session(session)
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToJournal) Model(m *model.AIJournalDetailedAnalysis) *aIJournalDetailedAnalysisBelongsToJournalTx {
	return &aIJournalDetailedAnalysisBelongsToJournalTx{a.db.Model(m).Association(a.Name())}
}

func (a aIJournalDetailedAnalysisBelongsToJournal) Unscoped() *aIJournalDetailedAnalysisBelongsToJournal {
	a.db = a.db.Unscoped()
	return &a
}

type aIJournalDetailedAnalysisBelongsToJournalTx struct{ tx *gorm.Association }

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Find() (result *model.Journals, err error) {
	return result, a.tx.Find(&result)
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Append(values ...*model.Journals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Replace(values ...*model.Journals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Delete(values ...*model.Journals) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Clear() error {
	return a.tx.Clear()
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Count() int64 {
	return a.tx.Count()
}

func (a aIJournalDetailedAnalysisBelongsToJournalTx) Unscoped() *aIJournalDetailedAnalysisBelongsToJournalTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aIJournalDetailedAnalysisBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a aIJournalDetailedAnalysisBelongsToUser) Where(conds ...field.Expr) *aIJournalDetailedAnalysisBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToUser) WithContext(ctx context.Context) *aIJournalDetailedAnalysisBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToUser) Session(session *gorm.Session) *aIJournalDetailedAnalysisBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a aIJournalDetailedAnalysisBelongsToUser) Model(m *model.AIJournalDetailedAnalysis) *aIJournalDetailedAnalysisBelongsToUserTx {
	return &aIJournalDetailedAnalysisBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a aIJournalDetailedAnalysisBelongsToUser) Unscoped() *aIJournalDetailedAnalysisBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type aIJournalDetailedAnalysisBelongsToUserTx struct{ tx *gorm.Association }

func (a aIJournalDetailedAnalysisBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a aIJournalDetailedAnalysisBelongsToUserTx) Unscoped() *aIJournalDetailedAnalysisBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aIJournalDetailedAnalysisDo struct{ gen.DO }

func (a aIJournalDetailedAnalysisDo) Debug() *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Debug())
}

func (a aIJournalDetailedAnalysisDo) WithContext(ctx context.Context) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIJournalDetailedAnalysisDo) ReadDB() *aIJournalDetailedAnalysisDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIJournalDetailedAnalysisDo) WriteDB() *aIJournalDetailedAnalysisDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIJournalDetailedAnalysisDo) Session(config *gorm.Session) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIJournalDetailedAnalysisDo) Clauses(conds ...clause.Expression) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIJournalDetailedAnalysisDo) Returning(value interface{}, columns ...string) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIJournalDetailedAnalysisDo) Not(conds ...gen.Condition) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIJournalDetailedAnalysisDo) Or(conds ...gen.Condition) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIJournalDetailedAnalysisDo) Select(conds ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIJournalDetailedAnalysisDo) Where(conds ...gen.Condition) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIJournalDetailedAnalysisDo) Order(conds ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIJournalDetailedAnalysisDo) Distinct(cols ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIJournalDetailedAnalysisDo) Omit(cols ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIJournalDetailedAnalysisDo) Join(table schema.Tabler, on ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIJournalDetailedAnalysisDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIJournalDetailedAnalysisDo) RightJoin(table schema.Tabler, on ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIJournalDetailedAnalysisDo) Group(cols ...field.Expr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIJournalDetailedAnalysisDo) Having(conds ...gen.Condition) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIJournalDetailedAnalysisDo) Limit(limit int) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIJournalDetailedAnalysisDo) Offset(offset int) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIJournalDetailedAnalysisDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIJournalDetailedAnalysisDo) Unscoped() *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIJournalDetailedAnalysisDo) Create(values ...*model.AIJournalDetailedAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIJournalDetailedAnalysisDo) CreateInBatches(values []*model.AIJournalDetailedAnalysis, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIJournalDetailedAnalysisDo) Save(values ...*model.AIJournalDetailedAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIJournalDetailedAnalysisDo) First() (*model.AIJournalDetailedAnalysis, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJournalDetailedAnalysis), nil
	}
}

func (a aIJournalDetailedAnalysisDo) Take() (*model.AIJournalDetailedAnalysis, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJournalDetailedAnalysis), nil
	}
}

func (a aIJournalDetailedAnalysisDo) Last() (*model.AIJournalDetailedAnalysis, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJournalDetailedAnalysis), nil
	}
}

func (a aIJournalDetailedAnalysisDo) Find() ([]*model.AIJournalDetailedAnalysis, error) {
	result, err := a.DO.Find()
	return result.([]*model.AIJournalDetailedAnalysis), err
}

func (a aIJournalDetailedAnalysisDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIJournalDetailedAnalysis, err error) {
	buf := make([]*model.AIJournalDetailedAnalysis, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIJournalDetailedAnalysisDo) FindInBatches(result *[]*model.AIJournalDetailedAnalysis, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIJournalDetailedAnalysisDo) Attrs(attrs ...field.AssignExpr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIJournalDetailedAnalysisDo) Assign(attrs ...field.AssignExpr) *aIJournalDetailedAnalysisDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIJournalDetailedAnalysisDo) Joins(fields ...field.RelationField) *aIJournalDetailedAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIJournalDetailedAnalysisDo) Preload(fields ...field.RelationField) *aIJournalDetailedAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIJournalDetailedAnalysisDo) FirstOrInit() (*model.AIJournalDetailedAnalysis, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJournalDetailedAnalysis), nil
	}
}

func (a aIJournalDetailedAnalysisDo) FirstOrCreate() (*model.AIJournalDetailedAnalysis, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJournalDetailedAnalysis), nil
	}
}

func (a aIJournalDetailedAnalysisDo) FindByPage(offset int, limit int) (result []*model.AIJournalDetailedAnalysis, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIJournalDetailedAnalysisDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIJournalDetailedAnalysisDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIJournalDetailedAnalysisDo) Delete(models ...*model.AIJournalDetailedAnalysis) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIJournalDetailedAnalysisDo) withDO(do gen.Dao) *aIJournalDetailedAnalysisDo {
	a.DO = *do.(*gen.DO)
	return a
}
