// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newLessons(db *gorm.DB, opts ...gen.DOOption) lessons {
	_lessons := lessons{}

	_lessons.lessonsDo.UseDB(db, opts...)
	_lessons.lessonsDo.UseModel(&model.Lessons{})

	tableName := _lessons.lessonsDo.TableName()
	_lessons.ALL = field.NewAsterisk(tableName)
	_lessons.ID = field.NewUint(tableName, "id")
	_lessons.CategoryID = field.NewUint(tableName, "category_id")
	_lessons.ParentID = field.NewUint(tableName, "parent_id")
	_lessons.Title = field.NewString(tableName, "title")
	_lessons.Slug = field.NewString(tableName, "slug")
	_lessons.Description = field.NewString(tableName, "description")
	_lessons.Content = field.NewString(tableName, "content")
	_lessons.LessonType = field.NewString(tableName, "lesson_type")
	_lessons.DifficultyLevel = field.NewString(tableName, "difficulty_level")
	_lessons.RequiredLevel = field.NewInt(tableName, "required_level")
	_lessons.EstimatedDuration = field.NewInt(tableName, "estimated_duration")
	_lessons.PointsReward = field.NewInt(tableName, "points_reward")
	_lessons.MediaURL = field.NewString(tableName, "media_url")
	_lessons.ThumbnailURL = field.NewString(tableName, "thumbnail_url")
	_lessons.Tags = field.NewString(tableName, "tags")
	_lessons.IsPremium = field.NewBool(tableName, "is_premium")
	_lessons.IsPublished = field.NewBool(tableName, "is_published")
	_lessons.ViewCount = field.NewInt(tableName, "view_count")
	_lessons.SortOrder = field.NewInt(tableName, "sort_order")
	_lessons.CreatedAt = field.NewTime(tableName, "created_at")
	_lessons.UpdatedAt = field.NewTime(tableName, "updated_at")
	_lessons.PublishedAt = field.NewTime(tableName, "published_at")
	_lessons.Category = lessonsBelongsToCategory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Category", "model.LessonCategories"),
	}

	_lessons.fillFieldMap()

	return _lessons
}

type lessons struct {
	lessonsDo lessonsDo

	ALL               field.Asterisk
	ID                field.Uint
	CategoryID        field.Uint
	ParentID          field.Uint
	Title             field.String
	Slug              field.String
	Description       field.String
	Content           field.String
	LessonType        field.String
	DifficultyLevel   field.String
	RequiredLevel     field.Int
	EstimatedDuration field.Int
	PointsReward      field.Int
	MediaURL          field.String
	ThumbnailURL      field.String
	Tags              field.String
	IsPremium         field.Bool
	IsPublished       field.Bool
	ViewCount         field.Int
	SortOrder         field.Int
	CreatedAt         field.Time
	UpdatedAt         field.Time
	PublishedAt       field.Time
	Category          lessonsBelongsToCategory

	fieldMap map[string]field.Expr
}

func (l lessons) Table(newTableName string) *lessons {
	l.lessonsDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lessons) As(alias string) *lessons {
	l.lessonsDo.DO = *(l.lessonsDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lessons) updateTableName(table string) *lessons {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CategoryID = field.NewUint(table, "category_id")
	l.ParentID = field.NewUint(table, "parent_id")
	l.Title = field.NewString(table, "title")
	l.Slug = field.NewString(table, "slug")
	l.Description = field.NewString(table, "description")
	l.Content = field.NewString(table, "content")
	l.LessonType = field.NewString(table, "lesson_type")
	l.DifficultyLevel = field.NewString(table, "difficulty_level")
	l.RequiredLevel = field.NewInt(table, "required_level")
	l.EstimatedDuration = field.NewInt(table, "estimated_duration")
	l.PointsReward = field.NewInt(table, "points_reward")
	l.MediaURL = field.NewString(table, "media_url")
	l.ThumbnailURL = field.NewString(table, "thumbnail_url")
	l.Tags = field.NewString(table, "tags")
	l.IsPremium = field.NewBool(table, "is_premium")
	l.IsPublished = field.NewBool(table, "is_published")
	l.ViewCount = field.NewInt(table, "view_count")
	l.SortOrder = field.NewInt(table, "sort_order")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.PublishedAt = field.NewTime(table, "published_at")

	l.fillFieldMap()

	return l
}

func (l *lessons) WithContext(ctx context.Context) *lessonsDo { return l.lessonsDo.WithContext(ctx) }

func (l lessons) TableName() string { return l.lessonsDo.TableName() }

func (l lessons) Alias() string { return l.lessonsDo.Alias() }

func (l lessons) Columns(cols ...field.Expr) gen.Columns { return l.lessonsDo.Columns(cols...) }

func (l *lessons) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lessons) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 23)
	l.fieldMap["id"] = l.ID
	l.fieldMap["category_id"] = l.CategoryID
	l.fieldMap["parent_id"] = l.ParentID
	l.fieldMap["title"] = l.Title
	l.fieldMap["slug"] = l.Slug
	l.fieldMap["description"] = l.Description
	l.fieldMap["content"] = l.Content
	l.fieldMap["lesson_type"] = l.LessonType
	l.fieldMap["difficulty_level"] = l.DifficultyLevel
	l.fieldMap["required_level"] = l.RequiredLevel
	l.fieldMap["estimated_duration"] = l.EstimatedDuration
	l.fieldMap["points_reward"] = l.PointsReward
	l.fieldMap["media_url"] = l.MediaURL
	l.fieldMap["thumbnail_url"] = l.ThumbnailURL
	l.fieldMap["tags"] = l.Tags
	l.fieldMap["is_premium"] = l.IsPremium
	l.fieldMap["is_published"] = l.IsPublished
	l.fieldMap["view_count"] = l.ViewCount
	l.fieldMap["sort_order"] = l.SortOrder
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["published_at"] = l.PublishedAt

}

func (l lessons) clone(db *gorm.DB) lessons {
	l.lessonsDo.ReplaceConnPool(db.Statement.ConnPool)
	l.Category.db = db.Session(&gorm.Session{Initialized: true})
	l.Category.db.Statement.ConnPool = db.Statement.ConnPool
	return l
}

func (l lessons) replaceDB(db *gorm.DB) lessons {
	l.lessonsDo.ReplaceDB(db)
	l.Category.db = db.Session(&gorm.Session{})
	return l
}

type lessonsBelongsToCategory struct {
	db *gorm.DB

	field.RelationField
}

func (a lessonsBelongsToCategory) Where(conds ...field.Expr) *lessonsBelongsToCategory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a lessonsBelongsToCategory) WithContext(ctx context.Context) *lessonsBelongsToCategory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a lessonsBelongsToCategory) Session(session *gorm.Session) *lessonsBelongsToCategory {
	a.db = a.db.Session(session)
	return &a
}

func (a lessonsBelongsToCategory) Model(m *model.Lessons) *lessonsBelongsToCategoryTx {
	return &lessonsBelongsToCategoryTx{a.db.Model(m).Association(a.Name())}
}

func (a lessonsBelongsToCategory) Unscoped() *lessonsBelongsToCategory {
	a.db = a.db.Unscoped()
	return &a
}

type lessonsBelongsToCategoryTx struct{ tx *gorm.Association }

func (a lessonsBelongsToCategoryTx) Find() (result *model.LessonCategories, err error) {
	return result, a.tx.Find(&result)
}

func (a lessonsBelongsToCategoryTx) Append(values ...*model.LessonCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a lessonsBelongsToCategoryTx) Replace(values ...*model.LessonCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a lessonsBelongsToCategoryTx) Delete(values ...*model.LessonCategories) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a lessonsBelongsToCategoryTx) Clear() error {
	return a.tx.Clear()
}

func (a lessonsBelongsToCategoryTx) Count() int64 {
	return a.tx.Count()
}

func (a lessonsBelongsToCategoryTx) Unscoped() *lessonsBelongsToCategoryTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type lessonsDo struct{ gen.DO }

func (l lessonsDo) Debug() *lessonsDo {
	return l.withDO(l.DO.Debug())
}

func (l lessonsDo) WithContext(ctx context.Context) *lessonsDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lessonsDo) ReadDB() *lessonsDo {
	return l.Clauses(dbresolver.Read)
}

func (l lessonsDo) WriteDB() *lessonsDo {
	return l.Clauses(dbresolver.Write)
}

func (l lessonsDo) Session(config *gorm.Session) *lessonsDo {
	return l.withDO(l.DO.Session(config))
}

func (l lessonsDo) Clauses(conds ...clause.Expression) *lessonsDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lessonsDo) Returning(value interface{}, columns ...string) *lessonsDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lessonsDo) Not(conds ...gen.Condition) *lessonsDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lessonsDo) Or(conds ...gen.Condition) *lessonsDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lessonsDo) Select(conds ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lessonsDo) Where(conds ...gen.Condition) *lessonsDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lessonsDo) Order(conds ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lessonsDo) Distinct(cols ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lessonsDo) Omit(cols ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lessonsDo) Join(table schema.Tabler, on ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lessonsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lessonsDo) RightJoin(table schema.Tabler, on ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lessonsDo) Group(cols ...field.Expr) *lessonsDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lessonsDo) Having(conds ...gen.Condition) *lessonsDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lessonsDo) Limit(limit int) *lessonsDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lessonsDo) Offset(offset int) *lessonsDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lessonsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lessonsDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lessonsDo) Unscoped() *lessonsDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lessonsDo) Create(values ...*model.Lessons) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lessonsDo) CreateInBatches(values []*model.Lessons, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lessonsDo) Save(values ...*model.Lessons) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lessonsDo) First() (*model.Lessons, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lessons), nil
	}
}

func (l lessonsDo) Take() (*model.Lessons, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lessons), nil
	}
}

func (l lessonsDo) Last() (*model.Lessons, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lessons), nil
	}
}

func (l lessonsDo) Find() ([]*model.Lessons, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lessons), err
}

func (l lessonsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lessons, err error) {
	buf := make([]*model.Lessons, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lessonsDo) FindInBatches(result *[]*model.Lessons, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lessonsDo) Attrs(attrs ...field.AssignExpr) *lessonsDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lessonsDo) Assign(attrs ...field.AssignExpr) *lessonsDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lessonsDo) Joins(fields ...field.RelationField) *lessonsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lessonsDo) Preload(fields ...field.RelationField) *lessonsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lessonsDo) FirstOrInit() (*model.Lessons, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lessons), nil
	}
}

func (l lessonsDo) FirstOrCreate() (*model.Lessons, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lessons), nil
	}
}

func (l lessonsDo) FindByPage(offset int, limit int) (result []*model.Lessons, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lessonsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lessonsDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lessonsDo) Delete(models ...*model.Lessons) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lessonsDo) withDO(do gen.Dao) *lessonsDo {
	l.DO = *do.(*gen.DO)
	return l
}
