// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newUserLevels(db *gorm.DB, opts ...gen.DOOption) userLevels {
	_userLevels := userLevels{}

	_userLevels.userLevelsDo.UseDB(db, opts...)
	_userLevels.userLevelsDo.UseModel(&model.UserLevels{})

	tableName := _userLevels.userLevelsDo.TableName()
	_userLevels.ALL = field.NewAsterisk(tableName)
	_userLevels.ID = field.NewUint(tableName, "id")
	_userLevels.LevelNumber = field.NewInt(tableName, "level_number")
	_userLevels.LevelName = field.NewString(tableName, "level_name")
	_userLevels.MinScore = field.NewInt(tableName, "min_score")
	_userLevels.MaxScore = field.NewInt(tableName, "max_score")
	_userLevels.Description = field.NewString(tableName, "description")
	_userLevels.Icon = field.NewString(tableName, "icon")
	_userLevels.Color = field.NewString(tableName, "color")
	_userLevels.BadgeImage = field.NewString(tableName, "badge_image")
	_userLevels.Perks = field.NewString(tableName, "perks")
	_userLevels.CreatedAt = field.NewTime(tableName, "created_at")

	_userLevels.fillFieldMap()

	return _userLevels
}

type userLevels struct {
	userLevelsDo userLevelsDo

	ALL         field.Asterisk
	ID          field.Uint
	LevelNumber field.Int
	LevelName   field.String
	MinScore    field.Int
	MaxScore    field.Int
	Description field.String
	Icon        field.String
	Color       field.String
	BadgeImage  field.String
	Perks       field.String
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (u userLevels) Table(newTableName string) *userLevels {
	u.userLevelsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLevels) As(alias string) *userLevels {
	u.userLevelsDo.DO = *(u.userLevelsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLevels) updateTableName(table string) *userLevels {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.LevelNumber = field.NewInt(table, "level_number")
	u.LevelName = field.NewString(table, "level_name")
	u.MinScore = field.NewInt(table, "min_score")
	u.MaxScore = field.NewInt(table, "max_score")
	u.Description = field.NewString(table, "description")
	u.Icon = field.NewString(table, "icon")
	u.Color = field.NewString(table, "color")
	u.BadgeImage = field.NewString(table, "badge_image")
	u.Perks = field.NewString(table, "perks")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userLevels) WithContext(ctx context.Context) *userLevelsDo {
	return u.userLevelsDo.WithContext(ctx)
}

func (u userLevels) TableName() string { return u.userLevelsDo.TableName() }

func (u userLevels) Alias() string { return u.userLevelsDo.Alias() }

func (u userLevels) Columns(cols ...field.Expr) gen.Columns { return u.userLevelsDo.Columns(cols...) }

func (u *userLevels) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLevels) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["level_number"] = u.LevelNumber
	u.fieldMap["level_name"] = u.LevelName
	u.fieldMap["min_score"] = u.MinScore
	u.fieldMap["max_score"] = u.MaxScore
	u.fieldMap["description"] = u.Description
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["color"] = u.Color
	u.fieldMap["badge_image"] = u.BadgeImage
	u.fieldMap["perks"] = u.Perks
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userLevels) clone(db *gorm.DB) userLevels {
	u.userLevelsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLevels) replaceDB(db *gorm.DB) userLevels {
	u.userLevelsDo.ReplaceDB(db)
	return u
}

type userLevelsDo struct{ gen.DO }

func (u userLevelsDo) Debug() *userLevelsDo {
	return u.withDO(u.DO.Debug())
}

func (u userLevelsDo) WithContext(ctx context.Context) *userLevelsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLevelsDo) ReadDB() *userLevelsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLevelsDo) WriteDB() *userLevelsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLevelsDo) Session(config *gorm.Session) *userLevelsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLevelsDo) Clauses(conds ...clause.Expression) *userLevelsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLevelsDo) Returning(value interface{}, columns ...string) *userLevelsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLevelsDo) Not(conds ...gen.Condition) *userLevelsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLevelsDo) Or(conds ...gen.Condition) *userLevelsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLevelsDo) Select(conds ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLevelsDo) Where(conds ...gen.Condition) *userLevelsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLevelsDo) Order(conds ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLevelsDo) Distinct(cols ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLevelsDo) Omit(cols ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLevelsDo) Join(table schema.Tabler, on ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLevelsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLevelsDo) RightJoin(table schema.Tabler, on ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLevelsDo) Group(cols ...field.Expr) *userLevelsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLevelsDo) Having(conds ...gen.Condition) *userLevelsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLevelsDo) Limit(limit int) *userLevelsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLevelsDo) Offset(offset int) *userLevelsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLevelsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userLevelsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLevelsDo) Unscoped() *userLevelsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLevelsDo) Create(values ...*model.UserLevels) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLevelsDo) CreateInBatches(values []*model.UserLevels, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLevelsDo) Save(values ...*model.UserLevels) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLevelsDo) First() (*model.UserLevels, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevels), nil
	}
}

func (u userLevelsDo) Take() (*model.UserLevels, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevels), nil
	}
}

func (u userLevelsDo) Last() (*model.UserLevels, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevels), nil
	}
}

func (u userLevelsDo) Find() ([]*model.UserLevels, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLevels), err
}

func (u userLevelsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLevels, err error) {
	buf := make([]*model.UserLevels, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLevelsDo) FindInBatches(result *[]*model.UserLevels, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLevelsDo) Attrs(attrs ...field.AssignExpr) *userLevelsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLevelsDo) Assign(attrs ...field.AssignExpr) *userLevelsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLevelsDo) Joins(fields ...field.RelationField) *userLevelsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLevelsDo) Preload(fields ...field.RelationField) *userLevelsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLevelsDo) FirstOrInit() (*model.UserLevels, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevels), nil
	}
}

func (u userLevelsDo) FirstOrCreate() (*model.UserLevels, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLevels), nil
	}
}

func (u userLevelsDo) FindByPage(offset int, limit int) (result []*model.UserLevels, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLevelsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLevelsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLevelsDo) Delete(models ...*model.UserLevels) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLevelsDo) withDO(do gen.Dao) *userLevelsDo {
	u.DO = *do.(*gen.DO)
	return u
}
