// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newUserPreferences(db *gorm.DB, opts ...gen.DOOption) userPreferences {
	_userPreferences := userPreferences{}

	_userPreferences.userPreferencesDo.UseDB(db, opts...)
	_userPreferences.userPreferencesDo.UseModel(&model.UserPreferences{})

	tableName := _userPreferences.userPreferencesDo.TableName()
	_userPreferences.ALL = field.NewAsterisk(tableName)
	_userPreferences.ID = field.NewUint(tableName, "id")
	_userPreferences.UserID = field.NewUint(tableName, "user_id")
	_userPreferences.ReminderJournal = field.NewBool(tableName, "reminder_journal")
	_userPreferences.ReminderMoodCheck = field.NewBool(tableName, "reminder_mood_check")
	_userPreferences.ReminderMeditation = field.NewBool(tableName, "reminder_meditation")
	_userPreferences.ReminderTime = field.NewString(tableName, "reminder_time")
	_userPreferences.NotificationEmail = field.NewBool(tableName, "notification_email")
	_userPreferences.NotificationPush = field.NewBool(tableName, "notification_push")
	_userPreferences.PrivacyLevel = field.NewString(tableName, "privacy_level")
	_userPreferences.Theme = field.NewString(tableName, "theme")
	_userPreferences.Language = field.NewString(tableName, "language")
	_userPreferences.CreatedAt = field.NewTime(tableName, "created_at")
	_userPreferences.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userPreferences.User = userPreferencesBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_userPreferences.fillFieldMap()

	return _userPreferences
}

type userPreferences struct {
	userPreferencesDo userPreferencesDo

	ALL                field.Asterisk
	ID                 field.Uint
	UserID             field.Uint
	ReminderJournal    field.Bool
	ReminderMoodCheck  field.Bool
	ReminderMeditation field.Bool
	ReminderTime       field.String
	NotificationEmail  field.Bool
	NotificationPush   field.Bool
	PrivacyLevel       field.String
	Theme              field.String
	Language           field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time
	User               userPreferencesBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userPreferences) Table(newTableName string) *userPreferences {
	u.userPreferencesDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPreferences) As(alias string) *userPreferences {
	u.userPreferencesDo.DO = *(u.userPreferencesDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPreferences) updateTableName(table string) *userPreferences {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.UserID = field.NewUint(table, "user_id")
	u.ReminderJournal = field.NewBool(table, "reminder_journal")
	u.ReminderMoodCheck = field.NewBool(table, "reminder_mood_check")
	u.ReminderMeditation = field.NewBool(table, "reminder_meditation")
	u.ReminderTime = field.NewString(table, "reminder_time")
	u.NotificationEmail = field.NewBool(table, "notification_email")
	u.NotificationPush = field.NewBool(table, "notification_push")
	u.PrivacyLevel = field.NewString(table, "privacy_level")
	u.Theme = field.NewString(table, "theme")
	u.Language = field.NewString(table, "language")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userPreferences) WithContext(ctx context.Context) *userPreferencesDo {
	return u.userPreferencesDo.WithContext(ctx)
}

func (u userPreferences) TableName() string { return u.userPreferencesDo.TableName() }

func (u userPreferences) Alias() string { return u.userPreferencesDo.Alias() }

func (u userPreferences) Columns(cols ...field.Expr) gen.Columns {
	return u.userPreferencesDo.Columns(cols...)
}

func (u *userPreferences) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPreferences) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["reminder_journal"] = u.ReminderJournal
	u.fieldMap["reminder_mood_check"] = u.ReminderMoodCheck
	u.fieldMap["reminder_meditation"] = u.ReminderMeditation
	u.fieldMap["reminder_time"] = u.ReminderTime
	u.fieldMap["notification_email"] = u.NotificationEmail
	u.fieldMap["notification_push"] = u.NotificationPush
	u.fieldMap["privacy_level"] = u.PrivacyLevel
	u.fieldMap["theme"] = u.Theme
	u.fieldMap["language"] = u.Language
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt

}

func (u userPreferences) clone(db *gorm.DB) userPreferences {
	u.userPreferencesDo.ReplaceConnPool(db.Statement.ConnPool)
	u.User.db = db.Session(&gorm.Session{Initialized: true})
	u.User.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u userPreferences) replaceDB(db *gorm.DB) userPreferences {
	u.userPreferencesDo.ReplaceDB(db)
	u.User.db = db.Session(&gorm.Session{})
	return u
}

type userPreferencesBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a userPreferencesBelongsToUser) Where(conds ...field.Expr) *userPreferencesBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userPreferencesBelongsToUser) WithContext(ctx context.Context) *userPreferencesBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userPreferencesBelongsToUser) Session(session *gorm.Session) *userPreferencesBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userPreferencesBelongsToUser) Model(m *model.UserPreferences) *userPreferencesBelongsToUserTx {
	return &userPreferencesBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a userPreferencesBelongsToUser) Unscoped() *userPreferencesBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type userPreferencesBelongsToUserTx struct{ tx *gorm.Association }

func (a userPreferencesBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a userPreferencesBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userPreferencesBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userPreferencesBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userPreferencesBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userPreferencesBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a userPreferencesBelongsToUserTx) Unscoped() *userPreferencesBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userPreferencesDo struct{ gen.DO }

func (u userPreferencesDo) Debug() *userPreferencesDo {
	return u.withDO(u.DO.Debug())
}

func (u userPreferencesDo) WithContext(ctx context.Context) *userPreferencesDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPreferencesDo) ReadDB() *userPreferencesDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPreferencesDo) WriteDB() *userPreferencesDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPreferencesDo) Session(config *gorm.Session) *userPreferencesDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPreferencesDo) Clauses(conds ...clause.Expression) *userPreferencesDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPreferencesDo) Returning(value interface{}, columns ...string) *userPreferencesDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPreferencesDo) Not(conds ...gen.Condition) *userPreferencesDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPreferencesDo) Or(conds ...gen.Condition) *userPreferencesDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPreferencesDo) Select(conds ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPreferencesDo) Where(conds ...gen.Condition) *userPreferencesDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPreferencesDo) Order(conds ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPreferencesDo) Distinct(cols ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPreferencesDo) Omit(cols ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPreferencesDo) Join(table schema.Tabler, on ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPreferencesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPreferencesDo) RightJoin(table schema.Tabler, on ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPreferencesDo) Group(cols ...field.Expr) *userPreferencesDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPreferencesDo) Having(conds ...gen.Condition) *userPreferencesDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPreferencesDo) Limit(limit int) *userPreferencesDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPreferencesDo) Offset(offset int) *userPreferencesDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPreferencesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userPreferencesDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPreferencesDo) Unscoped() *userPreferencesDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPreferencesDo) Create(values ...*model.UserPreferences) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPreferencesDo) CreateInBatches(values []*model.UserPreferences, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPreferencesDo) Save(values ...*model.UserPreferences) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPreferencesDo) First() (*model.UserPreferences, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPreferences), nil
	}
}

func (u userPreferencesDo) Take() (*model.UserPreferences, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPreferences), nil
	}
}

func (u userPreferencesDo) Last() (*model.UserPreferences, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPreferences), nil
	}
}

func (u userPreferencesDo) Find() ([]*model.UserPreferences, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPreferences), err
}

func (u userPreferencesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPreferences, err error) {
	buf := make([]*model.UserPreferences, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPreferencesDo) FindInBatches(result *[]*model.UserPreferences, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPreferencesDo) Attrs(attrs ...field.AssignExpr) *userPreferencesDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPreferencesDo) Assign(attrs ...field.AssignExpr) *userPreferencesDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPreferencesDo) Joins(fields ...field.RelationField) *userPreferencesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPreferencesDo) Preload(fields ...field.RelationField) *userPreferencesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPreferencesDo) FirstOrInit() (*model.UserPreferences, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPreferences), nil
	}
}

func (u userPreferencesDo) FirstOrCreate() (*model.UserPreferences, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPreferences), nil
	}
}

func (u userPreferencesDo) FindByPage(offset int, limit int) (result []*model.UserPreferences, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPreferencesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPreferencesDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPreferencesDo) Delete(models ...*model.UserPreferences) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPreferencesDo) withDO(do gen.Dao) *userPreferencesDo {
	u.DO = *do.(*gen.DO)
	return u
}
