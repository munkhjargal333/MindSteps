// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mindsteps/database/model"
)

func newAuthOTP(db *gorm.DB, opts ...gen.DOOption) authOTP {
	_authOTP := authOTP{}

	_authOTP.authOTPDo.UseDB(db, opts...)
	_authOTP.authOTPDo.UseModel(&model.AuthOTP{})

	tableName := _authOTP.authOTPDo.TableName()
	_authOTP.ALL = field.NewAsterisk(tableName)
	_authOTP.ID = field.NewUint(tableName, "id")
	_authOTP.UserID = field.NewUint(tableName, "user_id")
	_authOTP.MessageID = field.NewUint(tableName, "message_id")
	_authOTP.Otp = field.NewString(tableName, "otp")
	_authOTP.ExpiredAt = field.NewTime(tableName, "expired_at")
	_authOTP.CreatedAt = field.NewTime(tableName, "created_at")
	_authOTP.DeletedAt = field.NewField(tableName, "deleted_at")
	_authOTP.User = authOTPBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.Users"),
	}

	_authOTP.fillFieldMap()

	return _authOTP
}

type authOTP struct {
	authOTPDo authOTPDo

	ALL       field.Asterisk
	ID        field.Uint
	UserID    field.Uint
	MessageID field.Uint
	Otp       field.String
	ExpiredAt field.Time
	CreatedAt field.Time
	DeletedAt field.Field
	User      authOTPBelongsToUser

	fieldMap map[string]field.Expr
}

func (a authOTP) Table(newTableName string) *authOTP {
	a.authOTPDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authOTP) As(alias string) *authOTP {
	a.authOTPDo.DO = *(a.authOTPDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authOTP) updateTableName(table string) *authOTP {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.UserID = field.NewUint(table, "user_id")
	a.MessageID = field.NewUint(table, "message_id")
	a.Otp = field.NewString(table, "otp")
	a.ExpiredAt = field.NewTime(table, "expired_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *authOTP) WithContext(ctx context.Context) *authOTPDo { return a.authOTPDo.WithContext(ctx) }

func (a authOTP) TableName() string { return a.authOTPDo.TableName() }

func (a authOTP) Alias() string { return a.authOTPDo.Alias() }

func (a authOTP) Columns(cols ...field.Expr) gen.Columns { return a.authOTPDo.Columns(cols...) }

func (a *authOTP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authOTP) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["message_id"] = a.MessageID
	a.fieldMap["otp"] = a.Otp
	a.fieldMap["expired_at"] = a.ExpiredAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt

}

func (a authOTP) clone(db *gorm.DB) authOTP {
	a.authOTPDo.ReplaceConnPool(db.Statement.ConnPool)
	a.User.db = db.Session(&gorm.Session{Initialized: true})
	a.User.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a authOTP) replaceDB(db *gorm.DB) authOTP {
	a.authOTPDo.ReplaceDB(db)
	a.User.db = db.Session(&gorm.Session{})
	return a
}

type authOTPBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a authOTPBelongsToUser) Where(conds ...field.Expr) *authOTPBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a authOTPBelongsToUser) WithContext(ctx context.Context) *authOTPBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a authOTPBelongsToUser) Session(session *gorm.Session) *authOTPBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a authOTPBelongsToUser) Model(m *model.AuthOTP) *authOTPBelongsToUserTx {
	return &authOTPBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a authOTPBelongsToUser) Unscoped() *authOTPBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type authOTPBelongsToUserTx struct{ tx *gorm.Association }

func (a authOTPBelongsToUserTx) Find() (result *model.Users, err error) {
	return result, a.tx.Find(&result)
}

func (a authOTPBelongsToUserTx) Append(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a authOTPBelongsToUserTx) Replace(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a authOTPBelongsToUserTx) Delete(values ...*model.Users) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a authOTPBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a authOTPBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a authOTPBelongsToUserTx) Unscoped() *authOTPBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type authOTPDo struct{ gen.DO }

func (a authOTPDo) Debug() *authOTPDo {
	return a.withDO(a.DO.Debug())
}

func (a authOTPDo) WithContext(ctx context.Context) *authOTPDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authOTPDo) ReadDB() *authOTPDo {
	return a.Clauses(dbresolver.Read)
}

func (a authOTPDo) WriteDB() *authOTPDo {
	return a.Clauses(dbresolver.Write)
}

func (a authOTPDo) Session(config *gorm.Session) *authOTPDo {
	return a.withDO(a.DO.Session(config))
}

func (a authOTPDo) Clauses(conds ...clause.Expression) *authOTPDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authOTPDo) Returning(value interface{}, columns ...string) *authOTPDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authOTPDo) Not(conds ...gen.Condition) *authOTPDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authOTPDo) Or(conds ...gen.Condition) *authOTPDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authOTPDo) Select(conds ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authOTPDo) Where(conds ...gen.Condition) *authOTPDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authOTPDo) Order(conds ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authOTPDo) Distinct(cols ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authOTPDo) Omit(cols ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authOTPDo) Join(table schema.Tabler, on ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authOTPDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authOTPDo) RightJoin(table schema.Tabler, on ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authOTPDo) Group(cols ...field.Expr) *authOTPDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authOTPDo) Having(conds ...gen.Condition) *authOTPDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authOTPDo) Limit(limit int) *authOTPDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authOTPDo) Offset(offset int) *authOTPDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authOTPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authOTPDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authOTPDo) Unscoped() *authOTPDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authOTPDo) Create(values ...*model.AuthOTP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authOTPDo) CreateInBatches(values []*model.AuthOTP, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authOTPDo) Save(values ...*model.AuthOTP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authOTPDo) First() (*model.AuthOTP, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthOTP), nil
	}
}

func (a authOTPDo) Take() (*model.AuthOTP, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthOTP), nil
	}
}

func (a authOTPDo) Last() (*model.AuthOTP, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthOTP), nil
	}
}

func (a authOTPDo) Find() ([]*model.AuthOTP, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthOTP), err
}

func (a authOTPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthOTP, err error) {
	buf := make([]*model.AuthOTP, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authOTPDo) FindInBatches(result *[]*model.AuthOTP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authOTPDo) Attrs(attrs ...field.AssignExpr) *authOTPDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authOTPDo) Assign(attrs ...field.AssignExpr) *authOTPDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authOTPDo) Joins(fields ...field.RelationField) *authOTPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authOTPDo) Preload(fields ...field.RelationField) *authOTPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authOTPDo) FirstOrInit() (*model.AuthOTP, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthOTP), nil
	}
}

func (a authOTPDo) FirstOrCreate() (*model.AuthOTP, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthOTP), nil
	}
}

func (a authOTPDo) FindByPage(offset int, limit int) (result []*model.AuthOTP, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authOTPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authOTPDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authOTPDo) Delete(models ...*model.AuthOTP) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authOTPDo) withDO(do gen.Dao) *authOTPDo {
	a.DO = *do.(*gen.DO)
	return a
}
